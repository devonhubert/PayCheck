{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/devonhubert/languages/javascript/react_native/PayCheck/screens/LoginScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as Google from 'expo-google-app-auth';\nimport firebase from 'firebase';\nimport Spacer from \"../components/Spacer\";\n\nvar styles = require(\"../Styles\");\n\nvar LoginScreen = function (_Component) {\n  _inherits(LoginScreen, _Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.isUserEqual = function (googleUser, firebaseUser) {\n      if (firebaseUser) {\n        var providerData = firebaseUser.providerData;\n\n        for (var i = 0; i < providerData.length; i++) {\n          if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && providerData[i].uid === googleUser.getBasicProfile().getId()) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    _this.onSignIn = function (googleUser) {\n      console.log('Google Auth Response', googleUser);\n      var unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {\n        unsubscribe();\n\n        if (!this.isUserEqual(googleUser, firebaseUser)) {\n          var credential = firebase.auth.GoogleAuthProvider.credential(googleUser.idToken, googleUser.accessToken);\n          firebase.auth().signInWithCredential(credential).then(function (result) {\n            console.log('user signed in');\n\n            if (result.additionalUserInfo.isNewUser) {\n              firebase.database().ref('/users/' + result.user.uid).set({\n                gmail: result.user.email,\n                profile_picture: result.additionalUserInfo.profile.picture,\n                locale: result.additionalUserInfo.profile.locale,\n                first_name: result.additionalUserInfo.profile.given_name,\n                last_name: result.additionalUserInfo.profile.family_name,\n                created_at: Date.now()\n              }).then(function (snapshot) {});\n              firebase.database().ref('/users/' + result.user.uid + '/user_app_data').set({\n                total_earned: 0,\n                key_index: 0\n              });\n            } else {\n              firebase.database().ref('/users/' + result.user.uid).update({\n                last_logged_in: Date.now()\n              });\n            }\n          }).catch(function (error) {\n            var errorCode = error.code;\n            console.log(\"Got an error code: \" + errorCode);\n            var errorMessage = error.message;\n            console.log(\"Got an error message: \" + errorMessage);\n            var email = error.email;\n            console.log(\"Got an error email: \" + email);\n            var cred = error.credential;\n            console.log(\"Got an error credential: \" + cred);\n          });\n        } else {\n          console.log('User already signed-in Firebase.');\n        }\n      }.bind(_assertThisInitialized(_this)));\n    };\n\n    _this.signInWithGoogleAsync = function _callee() {\n      var result;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Google.logInAsync({\n                behavior: 'web',\n                androidClientId: '161568953678-cppb4dpflgvu1dgplb7k81ugg61f76uv.apps.googleusercontent.com',\n                iosClientId: '161568953678-vpdfr16qa1srdtpfpa116ag90usf10nj.apps.googleusercontent.com',\n                scopes: ['profile', 'email']\n              }));\n\n            case 3:\n              result = _context.sent;\n\n              if (!(result.type === 'success')) {\n                _context.next = 9;\n                break;\n              }\n\n              _this.onSignIn(result);\n\n              return _context.abrupt(\"return\", result.accessToken);\n\n            case 9:\n              return _context.abrupt(\"return\", {\n                cancelled: true\n              });\n\n            case 10:\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n              return _context.abrupt(\"return\", {\n                error: true\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 12]], Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 7\n        }\n      }, React.createElement(Image, {\n        source: require(\"../assets/icon.png\"),\n        style: {\n          width: 200,\n          height: 200\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }\n      }), React.createElement(Spacer, {\n        numSpaces: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }\n      }), React.createElement(Text, {\n        style: styles.header,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }\n      }, \"Log Your Earnings.\"), React.createElement(Text, {\n        style: styles.header,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }\n      }, \"Reach Your Goals.\"), React.createElement(Spacer, {\n        numSpaces: \"3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }\n      }), React.createElement(Button, {\n        color: \"#234041\",\n        title: \"Sign In With Google\",\n        onPress: function onPress() {\n          return _this2.signInWithGoogleAsync();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return LoginScreen;\n}(Component);\n\nexport default LoginScreen;","map":{"version":3,"sources":["/Users/devonhubert/languages/javascript/react_native/PayCheck/screens/LoginScreen.js"],"names":["React","Component","Google","firebase","Spacer","styles","require","LoginScreen","isUserEqual","googleUser","firebaseUser","providerData","i","length","providerId","auth","GoogleAuthProvider","PROVIDER_ID","uid","getBasicProfile","getId","onSignIn","console","log","unsubscribe","onAuthStateChanged","credential","idToken","accessToken","signInWithCredential","then","result","additionalUserInfo","isNewUser","database","ref","user","set","gmail","email","profile_picture","profile","picture","locale","first_name","given_name","last_name","family_name","created_at","Date","now","snapshot","total_earned","key_index","update","last_logged_in","catch","error","errorCode","code","errorMessage","message","cred","bind","signInWithGoogleAsync","logInAsync","behavior","androidClientId","iosClientId","scopes","type","cancelled","container","width","height","header"],"mappings":"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","sourcesContent":["//import ExpoStatusBar from 'expo-status-bar/build/ExpoStatusBar';\nimport React, { Component } from 'react';\nimport { View, Button, Image , Text} from 'react-native';\nimport * as Google from 'expo-google-app-auth';\nimport firebase from 'firebase';\nimport Spacer from '../components/Spacer';\nconst styles = require('../Styles');\n\nclass LoginScreen extends Component {\n\n  isUserEqual = (googleUser, firebaseUser) => {\n    //null if no user logged in\n    if (firebaseUser) {\n      var providerData = firebaseUser.providerData;\n      for (var i = 0; i < providerData.length; i++) {\n        \n        if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID && \n          providerData[i].uid === googleUser.getBasicProfile().getId()) {\n          //users are equal\n          // We don't need to reauth the Firebase connection.\n          return true;\n        }\n          //else, different user is logged in, need to reauth\n      }\n    }\n    //else, no user is logged in\n    return false;\n  }\n\n  onSignIn = (googleUser) => {\n    console.log('Google Auth Response', googleUser);\n    // We need to register an Observer on Firebase Auth to make sure auth is initialized.\n    var unsubscribe = firebase.auth().onAuthStateChanged(function(firebaseUser) {\n      unsubscribe();\n      // Check if we are already signed-in Firebase with the correct user.\n      if (!this.isUserEqual(googleUser, firebaseUser)) {\n        // Build Firebase credential with the Google ID token.\n        var credential = firebase.auth.GoogleAuthProvider.credential(\n          googleUser.idToken,\n          googleUser.accessToken  \n        );\n        // Sign in with credential from the Google user.\n        firebase\n          .auth()\n          .signInWithCredential(credential)\n          .then(function(result){   \n            console.log('user signed in');\n            if(result.additionalUserInfo.isNewUser) {\n              firebase\n                .database()\n                .ref('/users/' + result.user.uid)\n                .set({\n                  gmail: result.user.email,\n                  profile_picture: result.additionalUserInfo.profile.picture,\n                  locale: result.additionalUserInfo.profile.locale,\n                  first_name: result.additionalUserInfo.profile.given_name,\n                  last_name: result.additionalUserInfo.profile.family_name,\n                  created_at:Date.now()\n                })\n                .then(function (snapshot) {\n                  // console.log('Snapshot', snapshot);\n                });\n                \n                \n                //set initial app user info\n                firebase\n                .database()\n                .ref('/users/' + result.user.uid + '/user_app_data')\n                .set({\n                  total_earned: 0,\n                  key_index: 0,\n                })\n                \n                \n            } else {\n              firebase\n              .database()\n              .ref('/users/' + result.user.uid)\n              .update({\n                last_logged_in:Date.now()\n              }) \n            }\n\n          })\n          .catch(function(error) {\n            \n            // Handle Errors here.\n            var errorCode = error.code;\n            console.log(\"Got an error code: \" + errorCode);\n            var errorMessage = error.message;\n            console.log(\"Got an error message: \" + errorMessage);\n            // The email of the user's account used.\n            var email = error.email;\n            console.log(\"Got an error email: \" + email);\n            // The firebase.auth.AuthCredential type that was used.\n            var cred = error.credential;\n            console.log(\"Got an error credential: \" + cred);\n          });\n        } else {\n          console.log('User already signed-in Firebase.');\n        }\n    }.bind(this));\n  }\n  \n  signInWithGoogleAsync = async () =>{\n    try {\n      const result = await Google.logInAsync({\n        behavior: 'web',\n        androidClientId: '161568953678-cppb4dpflgvu1dgplb7k81ugg61f76uv.apps.googleusercontent.com',\n        iosClientId: '161568953678-vpdfr16qa1srdtpfpa116ag90usf10nj.apps.googleusercontent.com',\n        scopes: ['profile', 'email'],\n      });\n      \n      if (result.type === 'success') {\n        this.onSignIn(result);\n        return result.accessToken;\n      } else {\n        return { cancelled: true };\n      }\n    } catch (e) {\n      return { error: true };\n    }\n  }\n  \n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Image source={require('../assets/icon.png')} style={{width:200, height:200}} />\n        <Spacer numSpaces='3' />\n        <Text style={styles.header}>Log Your Earnings.</Text>\n        <Text style={styles.header}>Reach Your Goals.</Text>\n        <Spacer numSpaces='3' />\n        <Button \n          color=\"#234041\"\n          title=\"Sign In With Google\"\n          onPress={() => this.signInWithGoogleAsync()}\n        />\n      </View>\n    );\n  }\n}\n\nexport default LoginScreen;"]},"metadata":{},"sourceType":"module"}