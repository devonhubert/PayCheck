{"ast":null,"code":"import I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport getSceneIndicesForInterpolationInputRange from \"../../utils/getSceneIndicesForInterpolationInputRange\";\nvar EPS = 1e-5;\n\nfunction forInitial(props) {\n  var navigation = props.navigation,\n      scene = props.scene;\n  var focused = navigation.state.index === scene.index;\n  var opacity = focused ? 1 : 0;\n  var translate = focused ? 0 : 1000000;\n  return {\n    opacity: opacity,\n    transform: [{\n      translateX: translate\n    }, {\n      translateY: translate\n    }]\n  };\n}\n\nfunction forHorizontal(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var width = layout.initWidth;\n  var translateX = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: I18nManager.isRTL ? [-width, 0, width * 0.3] : [width, 0, width * -0.3],\n    extrapolate: 'clamp'\n  });\n  var shadowOpacity = props.shadowEnabled ? position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [0, 0.7, 0],\n    extrapolate: 'clamp'\n  }) : null;\n  var overlayOpacity = props.cardOverlayEnabled ? position.interpolate({\n    inputRange: [index, last - 0.5, last, last + EPS],\n    outputRange: [0, 0.07, 0.07, 0],\n    extrapolate: 'clamp'\n  }) : null;\n  return {\n    transform: [{\n      translateX: translateX\n    }],\n    overlayOpacity: overlayOpacity,\n    shadowOpacity: shadowOpacity\n  };\n}\n\nfunction forVertical(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var height = layout.initHeight;\n  var translateY = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [height, 0, 0],\n    extrapolate: 'clamp'\n  });\n  return {\n    transform: [{\n      translateY: translateY\n    }]\n  };\n}\n\nfunction forFadeFromBottomAndroid(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var opacity = position.interpolate({\n    inputRange: [first, first + 0.5, first + 0.9, index, last - 1e-5, last],\n    outputRange: [0, 0.25, 0.7, 1, 1, 0],\n    extrapolate: 'clamp'\n  });\n  var height = layout.initHeight;\n  var maxTranslation = height * 0.08;\n  var translateY = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [maxTranslation, 0, 0],\n    extrapolate: 'clamp'\n  });\n  return {\n    opacity: opacity,\n    transform: [{\n      translateY: translateY\n    }]\n  };\n}\n\nfunction forFadeToBottomAndroid(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var inputRange = [first, index, last];\n  var opacity = position.interpolate({\n    inputRange: inputRange,\n    outputRange: [0, 1, 1],\n    extrapolate: 'clamp'\n  });\n  var height = layout.initHeight;\n  var maxTranslation = height * 0.08;\n  var translateY = position.interpolate({\n    inputRange: inputRange,\n    outputRange: [maxTranslation, 0, 0],\n    extrapolate: 'clamp'\n  });\n  return {\n    opacity: opacity,\n    transform: [{\n      translateY: translateY\n    }]\n  };\n}\n\nfunction forFade(props) {\n  var layout = props.layout,\n      position = props.position,\n      scene = props.scene;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var first = interpolate.first,\n      last = interpolate.last;\n  var index = scene.index;\n  var opacity = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [0, 1, 1],\n    extrapolate: 'clamp'\n  });\n  return {\n    opacity: opacity\n  };\n}\n\nexport default {\n  forHorizontal: forHorizontal,\n  forVertical: forVertical,\n  forFadeFromBottomAndroid: forFadeFromBottomAndroid,\n  forFadeToBottomAndroid: forFadeToBottomAndroid,\n  forFade: forFade\n};","map":{"version":3,"sources":["/Users/devonhubert/languages/javascript/react_native/PayCheck/node_modules/react-navigation-stack/dist/views/StackView/StackViewStyleInterpolator.js"],"names":["getSceneIndicesForInterpolationInputRange","EPS","forInitial","props","navigation","scene","focused","state","index","opacity","translate","transform","translateX","translateY","forHorizontal","layout","position","isMeasured","interpolate","first","last","width","initWidth","inputRange","outputRange","I18nManager","isRTL","extrapolate","shadowOpacity","shadowEnabled","overlayOpacity","cardOverlayEnabled","forVertical","height","initHeight","forFadeFromBottomAndroid","maxTranslation","forFadeToBottomAndroid","forFade"],"mappings":"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","sourcesContent":["import { I18nManager } from 'react-native';\nimport getSceneIndicesForInterpolationInputRange from '../../utils/getSceneIndicesForInterpolationInputRange';\n\nconst EPS = 1e-5;\n\n/**\n * Utility that builds the style for the card in the cards stack.\n *\n *     +------------+\n *   +-+            |\n * +-+ |            |\n * | | |            |\n * | | |  Focused   |\n * | | |   Card     |\n * | | |            |\n * +-+ |            |\n *   +-+            |\n *     +------------+\n */\n\n/**\n * Render the initial style when the initial layout isn't measured yet.\n */\nfunction forInitial(props) {\n  const { navigation, scene } = props;\n\n  const focused = navigation.state.index === scene.index;\n  const opacity = focused ? 1 : 0;\n  // If not focused, move the scene far away.\n  const translate = focused ? 0 : 1000000;\n  return {\n    opacity,\n    transform: [{ translateX: translate }, { translateY: translate }]\n  };\n}\n\n/**\n * Standard iOS-style slide in from the right.\n */\nfunction forHorizontal(props) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n\n  const width = layout.initWidth;\n  const translateX = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: I18nManager.isRTL ? [-width, 0, width * 0.3] : [width, 0, width * -0.3],\n    extrapolate: 'clamp'\n  });\n\n  const shadowOpacity = props.shadowEnabled ? position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [0, 0.7, 0],\n    extrapolate: 'clamp'\n  }) : null;\n\n  let overlayOpacity = props.cardOverlayEnabled ? position.interpolate({\n    inputRange: [index, last - 0.5, last, last + EPS],\n    outputRange: [0, 0.07, 0.07, 0],\n    extrapolate: 'clamp'\n  }) : null;\n\n  return {\n    transform: [{ translateX }],\n    overlayOpacity,\n    shadowOpacity\n  };\n}\n\n/**\n * Standard iOS-style slide in from the bottom (used for modals).\n */\nfunction forVertical(props) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n  const height = layout.initHeight;\n  const translateY = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [height, 0, 0],\n    extrapolate: 'clamp'\n  });\n\n  return {\n    transform: [{ translateY }]\n  };\n}\n\n/**\n * Standard Android-style fade in from the bottom.\n */\nfunction forFadeFromBottomAndroid(props) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n  const opacity = position.interpolate({\n    inputRange: [first, first + 0.5, first + 0.9, index, last - 1e-5, last],\n    outputRange: [0, 0.25, 0.7, 1, 1, 0],\n    extrapolate: 'clamp'\n  });\n\n  const height = layout.initHeight;\n  const maxTranslation = height * 0.08;\n  const translateY = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [maxTranslation, 0, 0],\n    extrapolate: 'clamp'\n  });\n\n  return {\n    opacity,\n    transform: [{ translateY }]\n  };\n}\n\nfunction forFadeToBottomAndroid(props) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n  const inputRange = [first, index, last];\n\n  const opacity = position.interpolate({\n    inputRange,\n    outputRange: [0, 1, 1],\n    extrapolate: 'clamp'\n  });\n\n  const height = layout.initHeight;\n  const maxTranslation = height * 0.08;\n\n  const translateY = position.interpolate({\n    inputRange,\n    outputRange: [maxTranslation, 0, 0],\n    extrapolate: 'clamp'\n  });\n\n  return {\n    opacity,\n    transform: [{ translateY }]\n  };\n}\n\n/**\n *  fadeIn and fadeOut\n */\nfunction forFade(props) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n  const opacity = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [0, 1, 1],\n    extrapolate: 'clamp'\n  });\n\n  return {\n    opacity\n  };\n}\n\nexport default {\n  forHorizontal,\n  forVertical,\n  forFadeFromBottomAndroid,\n  forFadeToBottomAndroid,\n  forFade\n};"]},"metadata":{},"sourceType":"module"}