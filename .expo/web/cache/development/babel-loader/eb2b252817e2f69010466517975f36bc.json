{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _invariant = require(\"../utils/invariant\");\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _getScreenForRouteName = require(\"./getScreenForRouteName\");\n\nvar _getScreenForRouteName2 = _interopRequireDefault(_getScreenForRouteName);\n\nvar _createConfigGetter = require(\"./createConfigGetter\");\n\nvar _createConfigGetter2 = _interopRequireDefault(_createConfigGetter);\n\nvar _NavigationActions = require(\"../NavigationActions\");\n\nvar _NavigationActions2 = _interopRequireDefault(_NavigationActions);\n\nvar _StackActions = require(\"./StackActions\");\n\nvar _StackActions2 = _interopRequireDefault(_StackActions);\n\nvar _validateRouteConfigMap = require(\"./validateRouteConfigMap\");\n\nvar _validateRouteConfigMap2 = _interopRequireDefault(_validateRouteConfigMap);\n\nvar _pathUtils = require(\"./pathUtils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar defaultActionCreators = function defaultActionCreators() {\n  return {};\n};\n\nfunction childrenUpdateWithoutSwitchingIndex(actionType) {\n  return [_NavigationActions2.default.SET_PARAMS, _StackActions2.default.COMPLETE_TRANSITION].includes(actionType);\n}\n\nexports.default = function (routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _validateRouteConfigMap2.default)(routeConfigs);\n  var order = config.order || Object.keys(routeConfigs);\n  var getCustomActionCreators = config.getCustomActionCreators || defaultActionCreators;\n  var initialRouteParams = config.initialRouteParams;\n  var initialRouteName = config.initialRouteName || order[0];\n  var backBehavior = config.backBehavior || 'none';\n  var shouldBackNavigateToInitialRoute = backBehavior === 'initialRoute';\n  var resetOnBlur = config.hasOwnProperty('resetOnBlur') ? config.resetOnBlur : true;\n  var initialRouteIndex = order.indexOf(initialRouteName);\n  var childRouters = {};\n  order.forEach(function (routeName) {\n    childRouters[routeName] = null;\n    var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    var routeConfig = routeConfigs[routeName];\n\n    if (routeConfig && routeConfig.params) {\n      return _extends({}, routeConfig.params, params);\n    } else {\n      return params;\n    }\n  }\n\n  var _ref = (0, _pathUtils.createPathParser)(childRouters, routeConfigs, config),\n      getPathAndParamsForRoute = _ref.getPathAndParamsForRoute,\n      _getActionForPathAndParams = _ref.getActionForPathAndParams;\n\n  if (initialRouteIndex === -1) {\n    throw new Error(\"Invalid initialRouteName '\" + initialRouteName + \"'.\" + (\"Should be one of \" + order.map(function (n) {\n      return \"\\\"\" + n + \"\\\"\";\n    }).join(', ')));\n  }\n\n  function resetChildRoute(routeName) {\n    var initialParams = routeName === initialRouteName ? initialRouteParams : undefined;\n    var params = getParamsForRoute(routeName, initialParams);\n    var childRouter = childRouters[routeName];\n\n    if (childRouter) {\n      var childAction = _NavigationActions2.default.init();\n\n      return _extends({}, childRouter.getStateForAction(childAction), {\n        key: routeName,\n        routeName: routeName,\n        params: params\n      });\n    }\n\n    return {\n      key: routeName,\n      routeName: routeName,\n      params: params\n    };\n  }\n\n  function getNextState(prevState, possibleNextState) {\n    if (!prevState) {\n      return possibleNextState;\n    }\n\n    var nextState = void 0;\n\n    if (prevState.index !== possibleNextState.index && resetOnBlur) {\n      var prevRouteName = prevState.routes[prevState.index].routeName;\n\n      var nextRoutes = _toConsumableArray(possibleNextState.routes);\n\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      return _extends({}, possibleNextState, {\n        routes: nextRoutes\n      });\n    } else {\n      nextState = possibleNextState;\n    }\n\n    return nextState;\n  }\n\n  function getInitialState() {\n    var routes = order.map(resetChildRoute);\n    return {\n      routes: routes,\n      index: initialRouteIndex,\n      isTransitioning: false\n    };\n  }\n\n  return {\n    childRouters: childRouters,\n    getActionCreators: function getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n    getStateForAction: function getStateForAction(action, inputState) {\n      var prevState = inputState ? _extends({}, inputState) : inputState;\n      var state = inputState || getInitialState();\n      var activeChildIndex = state.index;\n\n      if (action.type === _NavigationActions2.default.INIT) {\n        var params = action.params;\n\n        if (params) {\n          state.routes = state.routes.map(function (route) {\n            return _extends({}, route, {\n              params: _extends({}, route.params, params, route.routeName === initialRouteName ? initialRouteParams : null)\n            });\n          });\n        }\n      }\n\n      var activeChildLastState = state.routes[state.index];\n      var activeChildRouter = childRouters[order[state.index]];\n\n      if (activeChildRouter) {\n        var activeChildState = activeChildRouter.getStateForAction(action, activeChildLastState);\n\n        if (!activeChildState && inputState) {\n          return null;\n        }\n\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          var _routes = _toConsumableArray(state.routes);\n\n          _routes[state.index] = activeChildState;\n          return getNextState(prevState, _extends({}, state, {\n            routes: _routes\n          }));\n        }\n      }\n\n      var isBackEligible = action.key == null || action.key === activeChildLastState.key;\n\n      if (action.type === _NavigationActions2.default.BACK) {\n        if (isBackEligible && shouldBackNavigateToInitialRoute) {\n          activeChildIndex = initialRouteIndex;\n        } else {\n          return state;\n        }\n      }\n\n      var didNavigate = false;\n\n      if (action.type === _NavigationActions2.default.NAVIGATE) {\n        didNavigate = !!order.find(function (childId, i) {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n\n          return false;\n        });\n\n        if (didNavigate) {\n          var childState = state.routes[activeChildIndex];\n          var childRouter = childRouters[action.routeName];\n          var newChildState = childState;\n\n          if (action.action && childRouter) {\n            var childStateUpdate = childRouter.getStateForAction(action.action, childState);\n\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n\n          if (action.params) {\n            newChildState = _extends({}, newChildState, {\n              params: _extends({}, newChildState.params || {}, action.params)\n            });\n          }\n\n          if (newChildState !== childState) {\n            var _routes2 = _toConsumableArray(state.routes);\n\n            _routes2[activeChildIndex] = newChildState;\n\n            var nextState = _extends({}, state, {\n              routes: _routes2,\n              index: activeChildIndex\n            });\n\n            return getNextState(prevState, nextState);\n          } else if (newChildState === childState && state.index === activeChildIndex && prevState) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === _NavigationActions2.default.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n\n        if (lastRoute) {\n          var _params = _extends({}, lastRoute.params, action.params);\n\n          var _routes3 = _toConsumableArray(state.routes);\n\n          _routes3[state.routes.indexOf(lastRoute)] = _extends({}, lastRoute, {\n            params: _params\n          });\n          return getNextState(prevState, _extends({}, state, {\n            routes: _routes3\n          }));\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(prevState, _extends({}, state, {\n          index: activeChildIndex\n        }));\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return _extends({}, state);\n      }\n\n      var index = state.index;\n      var routes = state.routes;\n      order.find(function (childId, i) {\n        var childRouter = childRouters[childId];\n\n        if (i === index) {\n          return false;\n        }\n\n        var childState = routes[i];\n\n        if (childRouter) {\n          childState = childRouter.getStateForAction(action, childState);\n        }\n\n        if (!childState) {\n          index = i;\n          return true;\n        }\n\n        if (childState !== routes[i]) {\n          routes = _toConsumableArray(routes);\n          routes[i] = childState;\n          index = i;\n          return true;\n        }\n\n        return false;\n      });\n\n      if (childrenUpdateWithoutSwitchingIndex(action.type)) {\n        index = state.index;\n      }\n\n      if (index !== state.index || routes !== state.routes) {\n        return getNextState(prevState, _extends({}, state, {\n          index: index,\n          routes: routes\n        }));\n      }\n\n      return state;\n    },\n    getComponentForState: function getComponentForState(state) {\n      var routeName = state.routes[state.index].routeName;\n      (0, _invariant2.default)(routeName, \"There is no route defined for index \" + state.index + \". Check that\\n        that you passed in a navigation state with a valid tab/screen index.\");\n      var childRouter = childRouters[routeName];\n\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n\n      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    },\n    getComponentForRouteName: function getComponentForRouteName(routeName) {\n      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    },\n    getPathAndParamsForState: function getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams: function getActionForPathAndParams(path, params) {\n      return _getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, config.defaultNavigationOptions)\n  };\n};","map":{"version":3,"sources":["/Users/devonhubert/languages/javascript/react_native/PayCheck/node_modules/@react-navigation/core/dist/routers/SwitchRouter.js"],"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_invariant","require","_invariant2","_interopRequireDefault","_getScreenForRouteName","_getScreenForRouteName2","_createConfigGetter","_createConfigGetter2","_NavigationActions","_NavigationActions2","_StackActions","_StackActions2","_validateRouteConfigMap","_validateRouteConfigMap2","_pathUtils","obj","__esModule","default","defaultActionCreators","childrenUpdateWithoutSwitchingIndex","actionType","SET_PARAMS","COMPLETE_TRANSITION","includes","routeConfigs","config","order","keys","getCustomActionCreators","initialRouteParams","initialRouteName","backBehavior","shouldBackNavigateToInitialRoute","resetOnBlur","initialRouteIndex","indexOf","childRouters","forEach","routeName","screen","router","getParamsForRoute","params","routeConfig","createPathParser","getPathAndParamsForRoute","getActionForPathAndParams","Error","map","n","join","resetChildRoute","initialParams","undefined","childRouter","childAction","init","getStateForAction","getNextState","prevState","possibleNextState","nextState","index","prevRouteName","routes","nextRoutes","getInitialState","isTransitioning","getActionCreators","route","stateKey","action","inputState","state","activeChildIndex","type","INIT","activeChildLastState","activeChildRouter","activeChildState","_routes","isBackEligible","BACK","didNavigate","NAVIGATE","find","childId","childState","newChildState","childStateUpdate","_routes2","lastRoute","_params","_routes3","getComponentForState","getComponentForRouteName","getPathAndParamsForState","path","getScreenOptions","defaultNavigationOptions"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _invariant = require('../utils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _getScreenForRouteName = require('./getScreenForRouteName');\n\nvar _getScreenForRouteName2 = _interopRequireDefault(_getScreenForRouteName);\n\nvar _createConfigGetter = require('./createConfigGetter');\n\nvar _createConfigGetter2 = _interopRequireDefault(_createConfigGetter);\n\nvar _NavigationActions = require('../NavigationActions');\n\nvar _NavigationActions2 = _interopRequireDefault(_NavigationActions);\n\nvar _StackActions = require('./StackActions');\n\nvar _StackActions2 = _interopRequireDefault(_StackActions);\n\nvar _validateRouteConfigMap = require('./validateRouteConfigMap');\n\nvar _validateRouteConfigMap2 = _interopRequireDefault(_validateRouteConfigMap);\n\nvar _pathUtils = require('./pathUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar defaultActionCreators = () => ({});\n\nfunction childrenUpdateWithoutSwitchingIndex(actionType) {\n  return [_NavigationActions2.default.SET_PARAMS,\n  // Todo: make SwitchRouter not depend on StackActions..\n  _StackActions2.default.COMPLETE_TRANSITION].includes(actionType);\n}\n\nexports.default = (routeConfigs, config = {}) => {\n  // Fail fast on invalid route definitions\n  (0, _validateRouteConfigMap2.default)(routeConfigs);\n\n  var order = config.order || Object.keys(routeConfigs);\n\n  var getCustomActionCreators = config.getCustomActionCreators || defaultActionCreators;\n\n  var initialRouteParams = config.initialRouteParams;\n  var initialRouteName = config.initialRouteName || order[0];\n  var backBehavior = config.backBehavior || 'none';\n  var shouldBackNavigateToInitialRoute = backBehavior === 'initialRoute';\n  var resetOnBlur = config.hasOwnProperty('resetOnBlur') ? config.resetOnBlur : true;\n  var initialRouteIndex = order.indexOf(initialRouteName);\n  var childRouters = {};\n  order.forEach(routeName => {\n    childRouters[routeName] = null;\n    var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    var routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return _extends({}, routeConfig.params, params);\n    } else {\n      return params;\n    }\n  }\n\n  var {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams\n  } = (0, _pathUtils.createPathParser)(childRouters, routeConfigs, config);\n\n  if (initialRouteIndex === -1) {\n    throw new Error(`Invalid initialRouteName '${initialRouteName}'.` + `Should be one of ${order.map(n => `\"${n}\"`).join(', ')}`);\n  }\n\n  function resetChildRoute(routeName) {\n    var initialParams = routeName === initialRouteName ? initialRouteParams : undefined;\n    // note(brentvatne): merging initialRouteParams *on top* of default params\n    // on the route seems incorrect but it's consistent with existing behavior\n    // in stackrouter\n    var params = getParamsForRoute(routeName, initialParams);\n    var childRouter = childRouters[routeName];\n    if (childRouter) {\n      var childAction = _NavigationActions2.default.init();\n      return _extends({}, childRouter.getStateForAction(childAction), {\n        key: routeName,\n        routeName,\n        params\n      });\n    }\n    return {\n      key: routeName,\n      routeName,\n      params\n    };\n  }\n\n  function getNextState(prevState, possibleNextState) {\n    if (!prevState) {\n      return possibleNextState;\n    }\n\n    var nextState = void 0;\n    if (prevState.index !== possibleNextState.index && resetOnBlur) {\n      var prevRouteName = prevState.routes[prevState.index].routeName;\n      var nextRoutes = [...possibleNextState.routes];\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n\n      return _extends({}, possibleNextState, {\n        routes: nextRoutes\n      });\n    } else {\n      nextState = possibleNextState;\n    }\n\n    return nextState;\n  }\n\n  function getInitialState() {\n    var routes = order.map(resetChildRoute);\n    return {\n      routes,\n      index: initialRouteIndex,\n      isTransitioning: false\n    };\n  }\n\n  return {\n    childRouters,\n\n    getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n\n    getStateForAction(action, inputState) {\n      var prevState = inputState ? _extends({}, inputState) : inputState;\n      var state = inputState || getInitialState();\n      var activeChildIndex = state.index;\n\n      if (action.type === _NavigationActions2.default.INIT) {\n        // NOTE(brentvatne): this seems weird... why are we merging these\n        // params into child routes?\n        // ---------------------------------------------------------------\n        // Merge any params from the action into all the child routes\n        var { params } = action;\n        if (params) {\n          state.routes = state.routes.map(route => _extends({}, route, {\n            params: _extends({}, route.params, params, route.routeName === initialRouteName ? initialRouteParams : null)\n          }));\n        }\n      }\n\n      // Let the current child handle it\n      var activeChildLastState = state.routes[state.index];\n      var activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        var activeChildState = activeChildRouter.getStateForAction(action, activeChildLastState);\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          var _routes = [...state.routes];\n          _routes[state.index] = activeChildState;\n          return getNextState(prevState, _extends({}, state, {\n            routes: _routes\n          }));\n        }\n      }\n\n      // Handle tab changing. Do this after letting the current tab try to\n      // handle the action, to allow inner children to change first\n      var isBackEligible = action.key == null || action.key === activeChildLastState.key;\n      if (action.type === _NavigationActions2.default.BACK) {\n        if (isBackEligible && shouldBackNavigateToInitialRoute) {\n          activeChildIndex = initialRouteIndex;\n        } else {\n          return state;\n        }\n      }\n\n      var didNavigate = false;\n      if (action.type === _NavigationActions2.default.NAVIGATE) {\n        didNavigate = !!order.find((childId, i) => {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          var childState = state.routes[activeChildIndex];\n          var childRouter = childRouters[action.routeName];\n          var newChildState = childState;\n\n          if (action.action && childRouter) {\n            var childStateUpdate = childRouter.getStateForAction(action.action, childState);\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n\n          if (action.params) {\n            newChildState = _extends({}, newChildState, {\n              params: _extends({}, newChildState.params || {}, action.params)\n            });\n          }\n\n          if (newChildState !== childState) {\n            var _routes2 = [...state.routes];\n            _routes2[activeChildIndex] = newChildState;\n            var nextState = _extends({}, state, {\n              routes: _routes2,\n              index: activeChildIndex\n            });\n            return getNextState(prevState, nextState);\n          } else if (newChildState === childState && state.index === activeChildIndex && prevState) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === _NavigationActions2.default.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          var _params = _extends({}, lastRoute.params, action.params);\n          var _routes3 = [...state.routes];\n          _routes3[state.routes.indexOf(lastRoute)] = _extends({}, lastRoute, {\n            params: _params\n          });\n          return getNextState(prevState, _extends({}, state, {\n            routes: _routes3\n          }));\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(prevState, _extends({}, state, {\n          index: activeChildIndex\n        }));\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return _extends({}, state);\n      }\n\n      // Let other children handle it and switch to the first child that returns a new state\n      var index = state.index;\n      var routes = state.routes;\n      order.find((childId, i) => {\n        var childRouter = childRouters[childId];\n        if (i === index) {\n          return false;\n        }\n        var childState = routes[i];\n        if (childRouter) {\n          childState = childRouter.getStateForAction(action, childState);\n        }\n        if (!childState) {\n          index = i;\n          return true;\n        }\n        if (childState !== routes[i]) {\n          routes = [...routes];\n          routes[i] = childState;\n          index = i;\n          return true;\n        }\n        return false;\n      });\n\n      // Nested routers can be updated after switching children with actions such as SET_PARAMS\n      // and COMPLETE_TRANSITION.\n      // NOTE: This may be problematic with custom routers because we whitelist the actions\n      // that can be handled by child routers without automatically changing index.\n      if (childrenUpdateWithoutSwitchingIndex(action.type)) {\n        index = state.index;\n      }\n\n      if (index !== state.index || routes !== state.routes) {\n        return getNextState(prevState, _extends({}, state, {\n          index,\n          routes\n        }));\n      }\n      return state;\n    },\n\n    getComponentForState(state) {\n      var routeName = state.routes[state.index].routeName;\n      (0, _invariant2.default)(routeName, `There is no route defined for index ${state.index}. Check that\n        that you passed in a navigation state with a valid tab/screen index.`);\n      var childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    },\n\n    getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, config.defaultNavigationOptions)\n  };\n};"]},"metadata":{},"sourceType":"script"}