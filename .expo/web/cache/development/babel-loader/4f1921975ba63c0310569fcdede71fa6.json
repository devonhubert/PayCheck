{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.default = getChildEventSubscriber;\n\nfunction getChildEventSubscriber(addListener, key) {\n  var initialLastFocusEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'didBlur';\n  var actionSubscribers = new Set();\n  var willFocusSubscribers = new Set();\n  var didFocusSubscribers = new Set();\n  var willBlurSubscribers = new Set();\n  var didBlurSubscribers = new Set();\n  var refocusSubscribers = new Set();\n\n  var removeAll = function removeAll() {\n    [actionSubscribers, willFocusSubscribers, didFocusSubscribers, willBlurSubscribers, didBlurSubscribers, refocusSubscribers].forEach(function (set) {\n      return set.clear();\n    });\n    upstreamSubscribers.forEach(function (subs) {\n      return subs && subs.remove();\n    });\n  };\n\n  var getChildSubscribers = function getChildSubscribers(evtName) {\n    switch (evtName) {\n      case 'action':\n        return actionSubscribers;\n\n      case 'willFocus':\n        return willFocusSubscribers;\n\n      case 'didFocus':\n        return didFocusSubscribers;\n\n      case 'willBlur':\n        return willBlurSubscribers;\n\n      case 'didBlur':\n        return didBlurSubscribers;\n\n      case 'refocus':\n        return refocusSubscribers;\n\n      default:\n        return null;\n    }\n  };\n\n  var _emit = function emit(type, payload) {\n    var payloadWithType = _extends({}, payload, {\n      type: type\n    });\n\n    var subscribers = getChildSubscribers(type);\n    subscribers && subscribers.forEach(function (subs) {\n      subs(payloadWithType);\n    });\n  };\n\n  var lastFocusEvent = initialLastFocusEvent;\n  var upstreamEvents = ['willFocus', 'didFocus', 'willBlur', 'didBlur', 'refocus', 'action'];\n  var upstreamSubscribers = upstreamEvents.map(function (eventName) {\n    return addListener(eventName, function (payload) {\n      if (eventName === 'refocus') {\n        _emit(eventName, payload);\n\n        return;\n      }\n\n      var state = payload.state,\n          lastState = payload.lastState,\n          action = payload.action;\n      var lastRoutes = lastState && lastState.routes;\n      var routes = state && state.routes;\n      var focusKey = routes && routes[state.index].key;\n      var isChildFocused = focusKey === key;\n      var lastRoute = lastRoutes && lastRoutes.find(function (route) {\n        return route.key === key;\n      });\n      var newRoute = routes && routes.find(function (route) {\n        return route.key === key;\n      });\n      var childPayload = {\n        context: key + \":\" + action.type + \"_\" + (payload.context || 'Root'),\n        state: newRoute,\n        lastState: lastRoute,\n        action: action,\n        type: eventName\n      };\n      var isTransitioning = !!state && state.isTransitioning;\n      var previouslylastFocusEvent = lastFocusEvent;\n\n      if (lastFocusEvent === 'didBlur') {\n        if (eventName === 'willFocus' && isChildFocused) {\n          _emit(lastFocusEvent = 'willFocus', childPayload);\n        } else if (eventName === 'action' && isChildFocused) {\n          _emit(lastFocusEvent = 'willFocus', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'willFocus') {\n        if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {\n          _emit(lastFocusEvent = 'didFocus', childPayload);\n        } else if (eventName === 'action' && isChildFocused && !isTransitioning) {\n          _emit(lastFocusEvent = 'didFocus', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'didFocus') {\n        if (!isChildFocused) {\n          _emit(lastFocusEvent = 'willBlur', childPayload);\n        } else if (eventName === 'willBlur') {\n          _emit(lastFocusEvent = 'willBlur', childPayload);\n        } else if (eventName === 'action' && previouslylastFocusEvent === 'didFocus') {\n          _emit('action', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'willBlur') {\n        if (eventName === 'action' && !isChildFocused && !isTransitioning) {\n          _emit(lastFocusEvent = 'didBlur', childPayload);\n        } else if (eventName === 'didBlur') {\n          _emit(lastFocusEvent = 'didBlur', childPayload);\n        } else if (eventName === 'action' && isChildFocused && !isTransitioning) {\n          _emit(lastFocusEvent = 'didFocus', childPayload);\n        } else if (eventName === 'action' && isChildFocused && isTransitioning) {\n          _emit(lastFocusEvent = 'willFocus', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'didBlur' && !newRoute) {\n        removeAll();\n      }\n    });\n  });\n  return {\n    addListener: function addListener(eventName, eventHandler) {\n      var subscribers = getChildSubscribers(eventName);\n\n      if (!subscribers) {\n        throw new Error(\"Invalid event name \\\"\" + eventName + \"\\\"\");\n      }\n\n      subscribers.add(eventHandler);\n\n      var remove = function remove() {\n        subscribers.delete(eventHandler);\n      };\n\n      return {\n        remove: remove\n      };\n    },\n    emit: function emit(eventName, payload) {\n      if (eventName !== 'refocus') {\n        console.error(\"navigation.emit only supports the 'refocus' event currently.\");\n        return;\n      }\n\n      _emit(eventName, payload);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/devonhubert/languages/javascript/react_native/PayCheck/node_modules/@react-navigation/core/dist/getChildEventSubscriber.js"],"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","default","getChildEventSubscriber","addListener","initialLastFocusEvent","actionSubscribers","Set","willFocusSubscribers","didFocusSubscribers","willBlurSubscribers","didBlurSubscribers","refocusSubscribers","removeAll","forEach","set","clear","upstreamSubscribers","subs","remove","getChildSubscribers","evtName","emit","type","payload","payloadWithType","subscribers","lastFocusEvent","upstreamEvents","map","eventName","state","lastState","action","lastRoutes","routes","focusKey","index","isChildFocused","lastRoute","find","route","newRoute","childPayload","context","isTransitioning","previouslylastFocusEvent","eventHandler","Error","add","delete","console","error"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = getChildEventSubscriber;\n/*\n * This is used to extract one children's worth of events from a stream of navigation action events\n *\n * Based on the 'action' events that get fired for this navigation state, this utility will fire\n * focus and blur events for this child\n */\nfunction getChildEventSubscriber(addListener, key, initialLastFocusEvent = 'didBlur') {\n  var actionSubscribers = new Set();\n  var willFocusSubscribers = new Set();\n  var didFocusSubscribers = new Set();\n  var willBlurSubscribers = new Set();\n  var didBlurSubscribers = new Set();\n  var refocusSubscribers = new Set();\n\n  var removeAll = () => {\n    [actionSubscribers, willFocusSubscribers, didFocusSubscribers, willBlurSubscribers, didBlurSubscribers, refocusSubscribers].forEach(set => set.clear());\n\n    upstreamSubscribers.forEach(subs => subs && subs.remove());\n  };\n\n  var getChildSubscribers = evtName => {\n    switch (evtName) {\n      case 'action':\n        return actionSubscribers;\n      case 'willFocus':\n        return willFocusSubscribers;\n      case 'didFocus':\n        return didFocusSubscribers;\n      case 'willBlur':\n        return willBlurSubscribers;\n      case 'didBlur':\n        return didBlurSubscribers;\n      case 'refocus':\n        return refocusSubscribers;\n      default:\n        return null;\n    }\n  };\n\n  var emit = (type, payload) => {\n    var payloadWithType = _extends({}, payload, { type });\n    var subscribers = getChildSubscribers(type);\n    subscribers && subscribers.forEach(subs => {\n      subs(payloadWithType);\n    });\n  };\n\n  // lastFocusEvent keeps track of focus state for one route. First we assume\n  // we are blurred. If we are focused on initialization, the first 'action'\n  // event will cause onFocus+willFocus events because we had previously been\n  // considered blurred\n  var lastFocusEvent = initialLastFocusEvent;\n\n  var upstreamEvents = ['willFocus', 'didFocus', 'willBlur', 'didBlur', 'refocus', 'action'];\n\n  var upstreamSubscribers = upstreamEvents.map(eventName => addListener(eventName, payload => {\n    if (eventName === 'refocus') {\n      emit(eventName, payload);\n      return;\n    }\n\n    var { state, lastState, action } = payload;\n    var lastRoutes = lastState && lastState.routes;\n    var routes = state && state.routes;\n\n    // const lastFocusKey =\n    //   lastState && lastState.routes && lastState.routes[lastState.index].key;\n    var focusKey = routes && routes[state.index].key;\n\n    var isChildFocused = focusKey === key;\n    var lastRoute = lastRoutes && lastRoutes.find(route => route.key === key);\n    var newRoute = routes && routes.find(route => route.key === key);\n    var childPayload = {\n      context: `${key}:${action.type}_${payload.context || 'Root'}`,\n      state: newRoute,\n      lastState: lastRoute,\n      action,\n      type: eventName\n    };\n    var isTransitioning = !!state && state.isTransitioning;\n\n    var previouslylastFocusEvent = lastFocusEvent;\n\n    if (lastFocusEvent === 'didBlur') {\n      // The child is currently blurred. Look for willFocus conditions\n      if (eventName === 'willFocus' && isChildFocused) {\n        emit(lastFocusEvent = 'willFocus', childPayload);\n      } else if (eventName === 'action' && isChildFocused) {\n        emit(lastFocusEvent = 'willFocus', childPayload);\n      }\n    }\n    if (lastFocusEvent === 'willFocus') {\n      // We are currently mid-focus. Look for didFocus conditions.\n      // If state.isTransitioning is false, this child event happens immediately after willFocus\n      if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {\n        emit(lastFocusEvent = 'didFocus', childPayload);\n      } else if (eventName === 'action' && isChildFocused && !isTransitioning) {\n        emit(lastFocusEvent = 'didFocus', childPayload);\n      }\n    }\n\n    if (lastFocusEvent === 'didFocus') {\n      // The child is currently focused. Look for blurring events\n      if (!isChildFocused) {\n        // The child is no longer focused within this navigation state\n        emit(lastFocusEvent = 'willBlur', childPayload);\n      } else if (eventName === 'willBlur') {\n        // The parent is getting a willBlur event\n        emit(lastFocusEvent = 'willBlur', childPayload);\n      } else if (eventName === 'action' && previouslylastFocusEvent === 'didFocus') {\n        // While focused, pass action events to children for grandchildren focus\n        emit('action', childPayload);\n      }\n    }\n\n    if (lastFocusEvent === 'willBlur') {\n      // The child is mid-blur. Wait for transition to end\n      if (eventName === 'action' && !isChildFocused && !isTransitioning) {\n        // The child is done blurring because transitioning is over, or isTransitioning\n        // never began and didBlur fires immediately after willBlur\n        emit(lastFocusEvent = 'didBlur', childPayload);\n      } else if (eventName === 'didBlur') {\n        // Pass through the parent didBlur event if it happens\n        emit(lastFocusEvent = 'didBlur', childPayload);\n      } else if (eventName === 'action' && isChildFocused && !isTransitioning) {\n        emit(lastFocusEvent = 'didFocus', childPayload);\n      } else if (eventName === 'action' && isChildFocused && isTransitioning) {\n        emit(lastFocusEvent = 'willFocus', childPayload);\n      }\n    }\n\n    if (lastFocusEvent === 'didBlur' && !newRoute) {\n      removeAll();\n    }\n  }));\n\n  return {\n    addListener(eventName, eventHandler) {\n      var subscribers = getChildSubscribers(eventName);\n      if (!subscribers) {\n        throw new Error(`Invalid event name \"${eventName}\"`);\n      }\n      subscribers.add(eventHandler);\n      var remove = () => {\n        subscribers.delete(eventHandler);\n      };\n      return { remove };\n    },\n    emit(eventName, payload) {\n      if (eventName !== 'refocus') {\n        console.error(`navigation.emit only supports the 'refocus' event currently.`);\n        return;\n      }\n      emit(eventName, payload);\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}