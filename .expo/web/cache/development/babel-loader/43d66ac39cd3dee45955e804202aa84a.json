{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/devonhubert/languages/javascript/react_native/PayCheck/node_modules/react-navigation-stack/dist/views/StackView/StackViewLayout.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { SceneView, StackActions, NavigationActions, NavigationProvider } from '@react-navigation/core';\nimport { withOrientation } from '@react-navigation/native';\nimport { ScreenContainer } from 'react-native-screens';\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport Card from \"./StackViewCard\";\nimport Header from \"../Header/Header\";\nimport TransitionConfigs from \"./StackViewTransitionConfigs\";\nimport HeaderStyleInterpolator from \"../Header/HeaderStyleInterpolator\";\nimport StackGestureContext from \"../../utils/StackGestureContext\";\nimport clamp from \"../../utils/clamp\";\nimport { supportsImprovedSpringAnimation } from \"../../utils/ReactNativeFeatures\";\nvar IPHONE_XS_HEIGHT = 812;\nvar IPHONE_XR_HEIGHT = 896;\n\nvar _Dimensions$get = Dimensions.get('window'),\n    WINDOW_WIDTH = _Dimensions$get.width,\n    WINDOW_HEIGHT = _Dimensions$get.height;\n\nvar IS_IPHONE_X = Platform.OS === 'ios' && !Platform.isPad && !Platform.isTVOS && (WINDOW_HEIGHT === IPHONE_XS_HEIGHT || WINDOW_WIDTH === IPHONE_XS_HEIGHT || WINDOW_HEIGHT === IPHONE_XR_HEIGHT || WINDOW_WIDTH === IPHONE_XR_HEIGHT);\nvar EaseInOut = Easing.inOut(Easing.ease);\nvar HEADER_LAYOUT_PRESET = ['center', 'left'];\nvar HEADER_TRANSITION_PRESET = ['fade-in-place', 'uikit'];\nvar HEADER_BACKGROUND_TRANSITION_PRESET = ['toggle', 'fade', 'translate'];\nvar ANIMATION_DURATION = 500;\nvar POSITION_THRESHOLD = 1 / 2;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nvar USE_NATIVE_DRIVER = true;\n\nvar getDefaultHeaderHeight = function getDefaultHeaderHeight(isLandscape) {\n  if (Platform.OS === 'ios') {\n    if (isLandscape && !Platform.isPad) {\n      return 32;\n    } else if (IS_IPHONE_X) {\n      return 88;\n    } else {\n      return 64;\n    }\n  } else {\n    return 56;\n  }\n};\n\nvar StackViewLayout = function (_React$Component) {\n  _inherits(StackViewLayout, _React$Component);\n\n  var _super = _createSuper(StackViewLayout);\n\n  function StackViewLayout(props) {\n    var _this;\n\n    _classCallCheck(this, StackViewLayout);\n\n    _this = _super.call(this, props);\n    _this._immediateIndex = null;\n\n    _this._onFloatingHeaderLayout = function (e) {\n      var height = e.nativeEvent.layout.height;\n\n      if (height !== _this.state.floatingHeaderHeight) {\n        _this.setState({\n          floatingHeaderHeight: height\n        });\n      }\n    };\n\n    _this._handlePanGestureStateChange = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        if (_this.positionSwitch.__getValue() === 1) {\n          return;\n        }\n\n        if (_this._isMotionVertical()) {\n          _this._handleReleaseVertical(nativeEvent);\n        } else {\n          _this._handleReleaseHorizontal(nativeEvent);\n        }\n      } else if (nativeEvent.state === State.ACTIVE) {\n        _this.positionSwitch.setValue(0);\n      }\n    };\n\n    _this._renderCard = function (scene) {\n      var _this$props = _this.props,\n          transitionProps = _this$props.transitionProps,\n          shadowEnabled = _this$props.shadowEnabled,\n          cardOverlayEnabled = _this$props.cardOverlayEnabled,\n          transparentCard = _this$props.transparentCard,\n          cardStyle = _this$props.cardStyle;\n      var screenInterpolator = _this._transitionConfig.screenInterpolator;\n      var style = screenInterpolator && screenInterpolator(_objectSpread(_objectSpread({}, transitionProps), {}, {\n        shadowEnabled: shadowEnabled,\n        cardOverlayEnabled: cardOverlayEnabled,\n        position: _this.position,\n        scene: scene\n      }));\n      var options = scene.descriptor.options;\n      var hasHeader = options.header !== null;\n\n      var headerMode = _this._getHeaderMode();\n\n      var paddingTopStyle;\n\n      if (hasHeader && headerMode === 'float' && !options.headerTransparent) {\n        paddingTopStyle = {\n          paddingTop: _this.state.floatingHeaderHeight\n        };\n      }\n\n      return React.createElement(Card, _extends({}, transitionProps, {\n        key: \"card_\" + scene.key,\n        position: _this.position,\n        realPosition: transitionProps.position,\n        animatedStyle: style,\n        transparent: transparentCard,\n        style: [paddingTopStyle, cardStyle],\n        scene: scene,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 12\n        }\n      }), _this._renderInnerScene(scene));\n    };\n\n    _this.panGestureRef = React.createRef();\n    _this.gestureX = new Animated.Value(0);\n    _this.gestureY = new Animated.Value(0);\n    _this.positionSwitch = new Animated.Value(1);\n\n    if (Animated.subtract) {\n      _this.gestureSwitch = Animated.subtract(1, _this.positionSwitch);\n    } else {\n      _this.gestureSwitch = Animated.add(1, Animated.multiply(-1, _this.positionSwitch));\n    }\n\n    _this.gestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _this.gestureX,\n        translationY: _this.gestureY\n      }\n    }], {\n      useNativeDriver: USE_NATIVE_DRIVER\n    });\n    _this.state = {\n      floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape)\n    };\n    return _this;\n  }\n\n  _createClass(StackViewLayout, [{\n    key: \"_renderHeader\",\n    value: function _renderHeader(scene, headerMode) {\n      var _this2 = this;\n\n      var options = scene.descriptor.options;\n      var header = options.header;\n\n      if (__DEV__ && typeof header === 'string') {\n        throw new Error(\"Invalid header value: \\\"\" + header + \"\\\". The header option must be a valid React component or null, not a string.\");\n      }\n\n      if (header === null && headerMode === 'screen') {\n        return null;\n      }\n\n      if (React.isValidElement(header)) {\n        return header;\n      }\n\n      var renderHeader = header || function (props) {\n        return React.createElement(Header, _extends({}, props, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 46\n          }\n        }));\n      };\n\n      var _this$_transitionConf = this._transitionConfig,\n          headerLeftInterpolator = _this$_transitionConf.headerLeftInterpolator,\n          headerTitleInterpolator = _this$_transitionConf.headerTitleInterpolator,\n          headerRightInterpolator = _this$_transitionConf.headerRightInterpolator,\n          headerBackgroundInterpolator = _this$_transitionConf.headerBackgroundInterpolator;\n\n      var backgroundTransitionPresetInterpolator = this._getHeaderBackgroundTransitionPreset();\n\n      if (backgroundTransitionPresetInterpolator) {\n        headerBackgroundInterpolator = backgroundTransitionPresetInterpolator;\n      }\n\n      var _this$props2 = this.props,\n          transitionProps = _this$props2.transitionProps,\n          passProps = _objectWithoutProperties(_this$props2, [\"transitionProps\"]);\n\n      return React.createElement(NavigationProvider, {\n        value: scene.descriptor.navigation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 12\n        }\n      }, renderHeader(_objectSpread(_objectSpread(_objectSpread({}, passProps), transitionProps), {}, {\n        position: this.position,\n        scene: scene,\n        mode: headerMode,\n        transitionPreset: this._getHeaderTransitionPreset(),\n        layoutPreset: this._getHeaderLayoutPreset(),\n        backTitleVisible: this._getHeaderBackTitleVisible(),\n        leftInterpolator: headerLeftInterpolator,\n        titleInterpolator: headerTitleInterpolator,\n        rightInterpolator: headerRightInterpolator,\n        backgroundInterpolator: headerBackgroundInterpolator\n      })));\n    }\n  }, {\n    key: \"_reset\",\n    value: function _reset(resetToIndex, duration) {\n      if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n        Animated.spring(this.props.transitionProps.position, {\n          toValue: resetToIndex,\n          stiffness: 6000,\n          damping: 100,\n          mass: 3,\n          overshootClamping: true,\n          restDisplacementThreshold: 0.01,\n          restSpeedThreshold: 0.01,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start();\n      } else {\n        Animated.timing(this.props.transitionProps.position, {\n          toValue: resetToIndex,\n          duration: duration,\n          easing: EaseInOut,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start();\n      }\n    }\n  }, {\n    key: \"_goBack\",\n    value: function _goBack(backFromIndex, duration) {\n      var _this3 = this;\n\n      var _this$props$transitio = this.props.transitionProps,\n          navigation = _this$props$transitio.navigation,\n          position = _this$props$transitio.position,\n          scenes = _this$props$transitio.scenes;\n      var toValue = Math.max(backFromIndex - 1, 0);\n      this._immediateIndex = toValue;\n\n      var onCompleteAnimation = function onCompleteAnimation() {\n        _this3._immediateIndex = null;\n        var backFromScene = scenes.find(function (s) {\n          return s.index === toValue + 1;\n        });\n\n        if (backFromScene) {\n          navigation.dispatch(NavigationActions.back({\n            key: backFromScene.route.key,\n            immediate: true\n          }));\n          navigation.dispatch(StackActions.completeTransition());\n        }\n      };\n\n      if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n        Animated.spring(position, {\n          toValue: toValue,\n          stiffness: 7000,\n          damping: 300,\n          mass: 3,\n          overshootClamping: true,\n          restDisplacementThreshold: 0.01,\n          restSpeedThreshold: 0.01,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start(onCompleteAnimation);\n      } else {\n        Animated.timing(position, {\n          toValue: toValue,\n          duration: duration,\n          easing: EaseInOut,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start(onCompleteAnimation);\n      }\n    }\n  }, {\n    key: \"_prepareAnimated\",\n    value: function _prepareAnimated() {\n      if (this.props === this._prevProps) {\n        return;\n      }\n\n      this._prevProps = this.props;\n\n      this._prepareGesture();\n\n      this._preparePosition();\n\n      this._prepareTransitionConfig();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this._prepareAnimated();\n\n      var transitionProps = this.props.transitionProps;\n      var index = transitionProps.navigation.state.index,\n          scenes = transitionProps.scenes;\n\n      var headerMode = this._getHeaderMode();\n\n      var floatingHeader = null;\n\n      if (headerMode === 'float') {\n        var scene = transitionProps.scene;\n        floatingHeader = React.createElement(View, {\n          style: styles.floatingHeader,\n          pointerEvents: \"box-none\",\n          onLayout: this._onFloatingHeaderLayout,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 24\n          }\n        }, this._renderHeader(scene, headerMode));\n      }\n\n      return React.createElement(PanGestureHandler, _extends({}, this._gestureActivationCriteria(), {\n        ref: this.panGestureRef,\n        onGestureEvent: this.gestureEvent,\n        onHandlerStateChange: this._handlePanGestureStateChange,\n        enabled: index > 0 && this._isGestureEnabled(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 12\n        }\n      }), React.createElement(Animated.View, {\n        style: [styles.container, this._transitionConfig.containerStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 9\n        }\n      }, React.createElement(StackGestureContext.Provider, {\n        value: this.panGestureRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }\n      }, React.createElement(ScreenContainer, {\n        style: styles.scenes,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }\n      }, scenes.map(this._renderCard)), floatingHeader)));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevState = prevProps.transitionProps.navigation.state;\n      var state = this.props.transitionProps.navigation.state;\n\n      if (prevState.index !== state.index) {\n        this._maybeCancelGesture();\n      }\n    }\n  }, {\n    key: \"_getGestureResponseDistance\",\n    value: function _getGestureResponseDistance() {\n      var scene = this.props.transitionProps.scene;\n      var options = scene.descriptor.options;\n      var _options$gestureRespo = options.gestureResponseDistance,\n          userGestureResponseDistance = _options$gestureRespo === void 0 ? {} : _options$gestureRespo;\n      return this._isModal() ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n    }\n  }, {\n    key: \"_gestureActivationCriteria\",\n    value: function _gestureActivationCriteria() {\n      var layout = this.props.transitionProps.layout;\n\n      var gestureResponseDistance = this._getGestureResponseDistance();\n\n      var isMotionInverted = this._isMotionInverted();\n\n      if (this._isMotionVertical()) {\n        var height = layout.height.__getValue();\n\n        return {\n          maxDeltaX: 15,\n          minOffsetY: isMotionInverted ? -5 : 5,\n          hitSlop: isMotionInverted ? {\n            top: -height + gestureResponseDistance\n          } : {\n            bottom: -height + gestureResponseDistance\n          }\n        };\n      } else {\n        var width = layout.width.__getValue();\n\n        var hitSlop = -width + gestureResponseDistance;\n        return {\n          minOffsetX: isMotionInverted ? -5 : 5,\n          maxDeltaY: 20,\n          hitSlop: isMotionInverted ? {\n            left: hitSlop\n          } : {\n            right: hitSlop\n          }\n        };\n      }\n    }\n  }, {\n    key: \"_isGestureEnabled\",\n    value: function _isGestureEnabled() {\n      var gesturesEnabled = this.props.transitionProps.scene.descriptor.options.gesturesEnabled;\n      return typeof gesturesEnabled === 'boolean' ? gesturesEnabled : Platform.OS === 'ios';\n    }\n  }, {\n    key: \"_isMotionVertical\",\n    value: function _isMotionVertical() {\n      return this._isModal();\n    }\n  }, {\n    key: \"_isModal\",\n    value: function _isModal() {\n      return this.props.mode === 'modal';\n    }\n  }, {\n    key: \"_isMotionInverted\",\n    value: function _isMotionInverted() {\n      var scene = this.props.transitionProps.scene;\n      var options = scene.descriptor.options;\n      var gestureDirection = options.gestureDirection;\n\n      if (this._isModal()) {\n        return gestureDirection === 'inverted';\n      } else {\n        return typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : I18nManager.isRTL;\n      }\n    }\n  }, {\n    key: \"_computeHorizontalGestureValue\",\n    value: function _computeHorizontalGestureValue(_ref2) {\n      var translationX = _ref2.translationX;\n      var _this$props$transitio2 = this.props.transitionProps,\n          navigation = _this$props$transitio2.navigation,\n          layout = _this$props$transitio2.layout;\n      var index = navigation.state.index;\n\n      var distance = layout.width.__getValue();\n\n      var x = this._isMotionInverted() ? -1 * translationX : translationX;\n      var value = index - x / distance;\n      return clamp(index - 1, value, index);\n    }\n  }, {\n    key: \"_computeVerticalGestureValue\",\n    value: function _computeVerticalGestureValue(_ref3) {\n      var translationY = _ref3.translationY;\n      var _this$props$transitio3 = this.props.transitionProps,\n          navigation = _this$props$transitio3.navigation,\n          layout = _this$props$transitio3.layout;\n      var index = navigation.state.index;\n\n      var distance = layout.height.__getValue();\n\n      var y = this._isMotionInverted() ? -1 * translationY : translationY;\n      var value = index - y / distance;\n      return clamp(index - 1, value, index);\n    }\n  }, {\n    key: \"_maybeCancelGesture\",\n    value: function _maybeCancelGesture() {\n      this.positionSwitch.setValue(1);\n    }\n  }, {\n    key: \"_prepareGesture\",\n    value: function _prepareGesture() {\n      if (!this._isGestureEnabled()) {\n        if (this.positionSwitch.__getValue() !== 1) {\n          this.positionSwitch.setValue(1);\n        }\n\n        this.gesturePosition = undefined;\n        return;\n      }\n\n      if (this.props.transitionProps.layout.width.__getValue() === 0 || this.props.transitionProps.layout.height.__getValue() === 0) {\n        return;\n      }\n\n      if (this._isMotionVertical()) {\n        this._prepareGestureVertical();\n      } else {\n        this._prepareGestureHorizontal();\n      }\n    }\n  }, {\n    key: \"_prepareGestureHorizontal\",\n    value: function _prepareGestureHorizontal() {\n      var index = this.props.transitionProps.navigation.state.index;\n\n      if (this._isMotionInverted()) {\n        this.gesturePosition = Animated.add(index, Animated.divide(this.gestureX, this.props.transitionProps.layout.width)).interpolate({\n          inputRange: [index - 1, index],\n          outputRange: [index - 1, index],\n          extrapolate: 'clamp'\n        });\n      } else {\n        this.gesturePosition = Animated.add(index, Animated.multiply(-1, Animated.divide(this.gestureX, this.props.transitionProps.layout.width))).interpolate({\n          inputRange: [index - 1, index],\n          outputRange: [index - 1, index],\n          extrapolate: 'clamp'\n        });\n      }\n    }\n  }, {\n    key: \"_prepareGestureVertical\",\n    value: function _prepareGestureVertical() {\n      var index = this.props.transitionProps.navigation.state.index;\n\n      if (this._isMotionInverted()) {\n        this.gesturePosition = Animated.add(index, Animated.divide(this.gestureY, this.props.transitionProps.layout.height)).interpolate({\n          inputRange: [index - 1, index],\n          outputRange: [index - 1, index],\n          extrapolate: 'clamp'\n        });\n      } else {\n        this.gesturePosition = Animated.add(index, Animated.multiply(-1, Animated.divide(this.gestureY, this.props.transitionProps.layout.height))).interpolate({\n          inputRange: [index - 1, index],\n          outputRange: [index - 1, index],\n          extrapolate: 'clamp'\n        });\n      }\n    }\n  }, {\n    key: \"_handleReleaseHorizontal\",\n    value: function _handleReleaseHorizontal(nativeEvent) {\n      var _this$props$transitio4 = this.props.transitionProps,\n          navigation = _this$props$transitio4.navigation,\n          position = _this$props$transitio4.position,\n          layout = _this$props$transitio4.layout;\n      var index = navigation.state.index;\n      var immediateIndex = this._immediateIndex == null ? index : this._immediateIndex;\n\n      var distance = layout.width.__getValue();\n\n      var movementDirection = this._isMotionInverted() ? -1 : 1;\n      var movedDistance = movementDirection * nativeEvent.translationX;\n      var gestureVelocity = movementDirection * nativeEvent.velocityX;\n      var defaultVelocity = distance / ANIMATION_DURATION;\n      var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n      var resetDuration = this._isMotionInverted() ? (distance - movedDistance) / velocity : movedDistance / velocity;\n      var goBackDuration = this._isMotionInverted() ? movedDistance / velocity : (distance - movedDistance) / velocity;\n\n      var value = this._computeHorizontalGestureValue(nativeEvent);\n\n      position.setValue(value);\n      this.positionSwitch.setValue(1);\n\n      if (gestureVelocity < -50) {\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n\n        this._reset(immediateIndex, resetDuration);\n\n        return;\n      }\n\n      if (gestureVelocity > 50) {\n        this.props.onGestureFinish && this.props.onGestureFinish();\n\n        this._goBack(immediateIndex, goBackDuration);\n\n        return;\n      }\n\n      if (value <= index - POSITION_THRESHOLD) {\n        this.props.onGestureFinish && this.props.onGestureFinish();\n\n        this._goBack(immediateIndex, goBackDuration);\n      } else {\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n\n        this._reset(immediateIndex, resetDuration);\n      }\n    }\n  }, {\n    key: \"_handleReleaseVertical\",\n    value: function _handleReleaseVertical(nativeEvent) {\n      var _this$props$transitio5 = this.props.transitionProps,\n          navigation = _this$props$transitio5.navigation,\n          position = _this$props$transitio5.position,\n          layout = _this$props$transitio5.layout;\n      var index = navigation.state.index;\n      var immediateIndex = this._immediateIndex == null ? index : this._immediateIndex;\n\n      var distance = layout.height.__getValue();\n\n      var isMotionInverted = this._isMotionInverted();\n\n      var movementDirection = isMotionInverted ? -1 : 1;\n      var movedDistance = movementDirection * nativeEvent.translationY;\n      var gestureVelocity = movementDirection * nativeEvent.velocityY;\n      var defaultVelocity = distance / ANIMATION_DURATION;\n      var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n      var resetDuration = isMotionInverted ? (distance - movedDistance) / velocity : movedDistance / velocity;\n      var goBackDuration = isMotionInverted ? movedDistance / velocity : (distance - movedDistance) / velocity;\n\n      var value = this._computeVerticalGestureValue(nativeEvent);\n\n      position.setValue(value);\n      this.positionSwitch.setValue(1);\n\n      if (gestureVelocity < -50) {\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n\n        this._reset(immediateIndex, resetDuration);\n\n        return;\n      }\n\n      if (gestureVelocity > 50) {\n        this.props.onGestureFinish && this.props.onGestureFinish();\n\n        this._goBack(immediateIndex, goBackDuration);\n\n        return;\n      }\n\n      if (value <= index - POSITION_THRESHOLD) {\n        this.props.onGestureFinish && this.props.onGestureFinish();\n\n        this._goBack(immediateIndex, goBackDuration);\n      } else {\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n\n        this._reset(immediateIndex, resetDuration);\n      }\n    }\n  }, {\n    key: \"_getHeaderMode\",\n    value: function _getHeaderMode() {\n      if (this.props.headerMode) {\n        return this.props.headerMode;\n      }\n\n      if (Platform.OS === 'android' || this.props.mode === 'modal') {\n        return 'screen';\n      }\n\n      return 'float';\n    }\n  }, {\n    key: \"_getHeaderBackgroundTransitionPreset\",\n    value: function _getHeaderBackgroundTransitionPreset() {\n      var headerBackgroundTransitionPreset = this.props.headerBackgroundTransitionPreset;\n\n      if (headerBackgroundTransitionPreset) {\n        if (HEADER_BACKGROUND_TRANSITION_PRESET.includes(headerBackgroundTransitionPreset)) {\n          if (headerBackgroundTransitionPreset === 'fade') {\n            return HeaderStyleInterpolator.forBackgroundWithFade;\n          } else if (headerBackgroundTransitionPreset === 'translate') {\n            return HeaderStyleInterpolator.forBackgroundWithTranslation;\n          } else if (headerBackgroundTransitionPreset === 'toggle') {\n            return HeaderStyleInterpolator.forBackgroundWithInactiveHidden;\n          }\n        } else if (__DEV__) {\n          console.error(\"Invalid configuration applied for headerBackgroundTransitionPreset - expected one of \" + HEADER_BACKGROUND_TRANSITION_PRESET.join(', ') + \" but received \" + JSON.stringify(headerBackgroundTransitionPreset));\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_getHeaderLayoutPreset\",\n    value: function _getHeaderLayoutPreset() {\n      var headerLayoutPreset = this.props.headerLayoutPreset;\n\n      if (headerLayoutPreset) {\n        if (__DEV__) {\n          if (this._getHeaderTransitionPreset() === 'uikit' && headerLayoutPreset === 'left' && Platform.OS === 'ios') {\n            console.warn(\"headerTransitionPreset with the value 'uikit' is incompatible with headerLayoutPreset 'left'\");\n          }\n        }\n\n        if (HEADER_LAYOUT_PRESET.includes(headerLayoutPreset)) {\n          return headerLayoutPreset;\n        }\n\n        if (__DEV__) {\n          console.error(\"Invalid configuration applied for headerLayoutPreset - expected one of \" + HEADER_LAYOUT_PRESET.join(', ') + \" but received \" + JSON.stringify(headerLayoutPreset));\n        }\n      }\n\n      if (Platform.OS === 'android') {\n        return 'left';\n      } else {\n        return 'center';\n      }\n    }\n  }, {\n    key: \"_getHeaderTransitionPreset\",\n    value: function _getHeaderTransitionPreset() {\n      if (Platform.OS === 'android' || this._getHeaderMode() === 'screen') {\n        return 'fade-in-place';\n      }\n\n      var headerTransitionPreset = this.props.headerTransitionPreset;\n\n      if (headerTransitionPreset) {\n        if (HEADER_TRANSITION_PRESET.includes(headerTransitionPreset)) {\n          return headerTransitionPreset;\n        }\n\n        if (__DEV__) {\n          console.error(\"Invalid configuration applied for headerTransitionPreset - expected one of \" + HEADER_TRANSITION_PRESET.join(', ') + \" but received \" + JSON.stringify(headerTransitionPreset));\n        }\n      }\n\n      return 'fade-in-place';\n    }\n  }, {\n    key: \"_getHeaderBackTitleVisible\",\n    value: function _getHeaderBackTitleVisible() {\n      var headerBackTitleVisible = this.props.headerBackTitleVisible;\n\n      var layoutPreset = this._getHeaderLayoutPreset();\n\n      var enabledByDefault = !(layoutPreset === 'left' || Platform.OS === 'android');\n      return typeof headerBackTitleVisible === 'boolean' ? headerBackTitleVisible : enabledByDefault;\n    }\n  }, {\n    key: \"_renderInnerScene\",\n    value: function _renderInnerScene(scene) {\n      var _scene$descriptor = scene.descriptor,\n          navigation = _scene$descriptor.navigation,\n          getComponent = _scene$descriptor.getComponent;\n      var SceneComponent = getComponent();\n      var screenProps = this.props.screenProps;\n\n      var headerMode = this._getHeaderMode();\n\n      if (headerMode === 'screen') {\n        return React.createElement(View, {\n          style: styles.container,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 14\n          }\n        }, React.createElement(View, {\n          style: styles.scenes,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 11\n          }\n        }, React.createElement(SceneView, {\n          screenProps: screenProps,\n          navigation: navigation,\n          component: SceneComponent,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 13\n          }\n        })), this._renderHeader(scene, headerMode));\n      }\n\n      return React.createElement(SceneView, {\n        screenProps: screenProps,\n        navigation: navigation,\n        component: SceneComponent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 12\n        }\n      });\n    }\n  }, {\n    key: \"_prepareTransitionConfig\",\n    value: function _prepareTransitionConfig() {\n      this._transitionConfig = TransitionConfigs.getTransitionConfig(this.props.transitionConfig, _objectSpread(_objectSpread({}, this.props.transitionProps), {}, {\n        position: this.position\n      }), this.props.lastTransitionProps, this._isModal());\n    }\n  }, {\n    key: \"_preparePosition\",\n    value: function _preparePosition() {\n      if (this.gesturePosition) {\n        this.position = Animated.add(Animated.multiply(this.props.transitionProps.position, this.positionSwitch), Animated.multiply(this.gesturePosition, this.gestureSwitch));\n      } else {\n        this.position = this.props.transitionProps.position;\n      }\n    }\n  }]);\n\n  return StackViewLayout;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n    overflow: 'hidden'\n  },\n  scenes: {\n    flex: 1\n  },\n  floatingHeader: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0\n  }\n});\nexport default withOrientation(StackViewLayout);","map":{"version":3,"sources":["/Users/devonhubert/languages/javascript/react_native/PayCheck/node_modules/react-navigation-stack/dist/views/StackView/StackViewLayout.js"],"names":["React","SceneView","StackActions","NavigationActions","NavigationProvider","withOrientation","ScreenContainer","PanGestureHandler","State","Card","Header","TransitionConfigs","HeaderStyleInterpolator","StackGestureContext","clamp","supportsImprovedSpringAnimation","IPHONE_XS_HEIGHT","IPHONE_XR_HEIGHT","Dimensions","get","WINDOW_WIDTH","width","WINDOW_HEIGHT","height","IS_IPHONE_X","Platform","OS","isPad","isTVOS","EaseInOut","Easing","inOut","ease","HEADER_LAYOUT_PRESET","HEADER_TRANSITION_PRESET","HEADER_BACKGROUND_TRANSITION_PRESET","ANIMATION_DURATION","POSITION_THRESHOLD","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","USE_NATIVE_DRIVER","getDefaultHeaderHeight","isLandscape","StackViewLayout","props","_immediateIndex","_onFloatingHeaderLayout","e","nativeEvent","layout","state","floatingHeaderHeight","setState","_handlePanGestureStateChange","oldState","ACTIVE","positionSwitch","__getValue","_isMotionVertical","_handleReleaseVertical","_handleReleaseHorizontal","setValue","_renderCard","scene","transitionProps","shadowEnabled","cardOverlayEnabled","transparentCard","cardStyle","screenInterpolator","_transitionConfig","style","position","options","descriptor","hasHeader","header","headerMode","_getHeaderMode","paddingTopStyle","headerTransparent","paddingTop","key","_renderInnerScene","panGestureRef","createRef","gestureX","Animated","Value","gestureY","subtract","gestureSwitch","add","multiply","gestureEvent","event","translationX","translationY","useNativeDriver","__DEV__","Error","isValidElement","renderHeader","headerLeftInterpolator","headerTitleInterpolator","headerRightInterpolator","headerBackgroundInterpolator","backgroundTransitionPresetInterpolator","_getHeaderBackgroundTransitionPreset","passProps","navigation","mode","transitionPreset","_getHeaderTransitionPreset","layoutPreset","_getHeaderLayoutPreset","backTitleVisible","_getHeaderBackTitleVisible","leftInterpolator","titleInterpolator","rightInterpolator","backgroundInterpolator","resetToIndex","duration","spring","toValue","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","start","timing","easing","backFromIndex","scenes","Math","max","onCompleteAnimation","backFromScene","find","s","index","dispatch","back","route","immediate","completeTransition","_prevProps","_prepareGesture","_preparePosition","_prepareTransitionConfig","_prepareAnimated","floatingHeader","styles","_renderHeader","_gestureActivationCriteria","_isGestureEnabled","container","containerStyle","map","prevProps","prevState","_maybeCancelGesture","gestureResponseDistance","userGestureResponseDistance","_isModal","vertical","horizontal","_getGestureResponseDistance","isMotionInverted","_isMotionInverted","maxDeltaX","minOffsetY","hitSlop","top","bottom","minOffsetX","maxDeltaY","left","right","gesturesEnabled","gestureDirection","I18nManager","isRTL","distance","x","value","y","gesturePosition","undefined","_prepareGestureVertical","_prepareGestureHorizontal","divide","interpolate","inputRange","outputRange","extrapolate","immediateIndex","movementDirection","movedDistance","gestureVelocity","velocityX","defaultVelocity","velocity","abs","resetDuration","goBackDuration","_computeHorizontalGestureValue","onGestureCanceled","_reset","onGestureFinish","_goBack","velocityY","_computeVerticalGestureValue","headerBackgroundTransitionPreset","includes","forBackgroundWithFade","forBackgroundWithTranslation","forBackgroundWithInactiveHidden","console","error","join","JSON","stringify","headerLayoutPreset","warn","headerTransitionPreset","headerBackTitleVisible","enabledByDefault","getComponent","SceneComponent","screenProps","getTransitionConfig","transitionConfig","lastTransitionProps","Component","StyleSheet","create","flex","flexDirection","overflow"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;;AAEA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,iBAAlC,EAAqDC,kBAArD,QAA+E,wBAA/E;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,iBAAT,EAA4BC,KAA5B,QAAyC,8BAAzC;AAEA,OAAOC,IAAP;AACA,OAAOC,MAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,uBAAP;AACA,OAAOC,mBAAP;AACA,OAAOC,KAAP;AACA,SAASC,+BAAT;AAEA,IAAMC,gBAAgB,GAAG,GAAzB;AACA,IAAMC,gBAAgB,GAAG,GAAzB;;sBACuDC,UAAU,CAACC,GAAX,CAAe,QAAf,C;IAAxCC,Y,mBAAPC,K;IAA6BC,a,mBAARC,M;;AAC7B,IAAMC,WAAW,GAAGC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyB,CAACD,QAAQ,CAACE,KAAnC,IAA4C,CAACF,QAAQ,CAACG,MAAtD,KAAiEN,aAAa,KAAKN,gBAAlB,IAAsCI,YAAY,KAAKJ,gBAAvD,IAA2EM,aAAa,KAAKL,gBAA7F,IAAiHG,YAAY,KAAKH,gBAAnM,CAApB;AAEA,IAAMY,SAAS,GAAGC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACE,IAApB,CAAlB;AAKA,IAAMC,oBAAoB,GAAG,CAAC,QAAD,EAAW,MAAX,CAA7B;AACA,IAAMC,wBAAwB,GAAG,CAAC,eAAD,EAAkB,OAAlB,CAAjC;AACA,IAAMC,mCAAmC,GAAG,CAAC,QAAD,EAAW,MAAX,EAAmB,WAAnB,CAA5C;AAOA,IAAMC,kBAAkB,GAAG,GAA3B;AAOA,IAAMC,kBAAkB,GAAG,IAAI,CAA/B;AAKA,IAAMC,oCAAoC,GAAG,EAA7C;AACA,IAAMC,kCAAkC,GAAG,GAA3C;AAEA,IAAMC,iBAAiB,GAAG,IAA1B;;AAEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAC,WAAW,EAAI;AAC5C,MAAIjB,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACzB,QAAIgB,WAAW,IAAI,CAACjB,QAAQ,CAACE,KAA7B,EAAoC;AAClC,aAAO,EAAP;AACD,KAFD,MAEO,IAAIH,WAAJ,EAAiB;AACtB,aAAO,EAAP;AACD,KAFM,MAEA;AACL,aAAO,EAAP;AACD;AACF,GARD,MAQO;AACL,WAAO,EAAP;AACD;AACF,CAZD;;IAcMmB,e;;;;;AAUJ,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AADiB,UAFnBC,eAEmB,GAFD,IAEC;;AAAA,UAiJnBC,uBAjJmB,GAiJO,UAAAC,CAAC,EAAI;AAAA,UACrBxB,MADqB,GACVwB,CAAC,CAACC,WAAF,CAAcC,MADJ,CACrB1B,MADqB;;AAE7B,UAAIA,MAAM,KAAK,MAAK2B,KAAL,CAAWC,oBAA1B,EAAgD;AAC9C,cAAKC,QAAL,CAAc;AAAED,UAAAA,oBAAoB,EAAE5B;AAAxB,SAAd;AACD;AACF,KAtJkB;;AAAA,UA0SnB8B,4BA1SmB,GA0SY,gBAAqB;AAAA,UAAlBL,WAAkB,QAAlBA,WAAkB;;AAClD,UAAIA,WAAW,CAACM,QAAZ,KAAyB9C,KAAK,CAAC+C,MAAnC,EAA2C;AAGzC,YAAI,MAAKC,cAAL,CAAoBC,UAApB,OAAqC,CAAzC,EAA4C;AAC1C;AACD;;AAED,YAAI,MAAKC,iBAAL,EAAJ,EAA8B;AAC5B,gBAAKC,sBAAL,CAA4BX,WAA5B;AACD,SAFD,MAEO;AACL,gBAAKY,wBAAL,CAA8BZ,WAA9B;AACD;AACF,OAZD,MAYO,IAAIA,WAAW,CAACE,KAAZ,KAAsB1C,KAAK,CAAC+C,MAAhC,EAAwC;AAE7C,cAAKC,cAAL,CAAoBK,QAApB,CAA6B,CAA7B;AAaD;AACF,KAvUkB;;AAAA,UA4lBnBC,WA5lBmB,GA4lBL,UAAAC,KAAK,EAAI;AAAA,wBAOjB,MAAKnB,KAPY;AAAA,UAEnBoB,eAFmB,eAEnBA,eAFmB;AAAA,UAGnBC,aAHmB,eAGnBA,aAHmB;AAAA,UAInBC,kBAJmB,eAInBA,kBAJmB;AAAA,UAKnBC,eALmB,eAKnBA,eALmB;AAAA,UAMnBC,SANmB,eAMnBA,SANmB;AAAA,UASbC,kBATa,GASU,MAAKC,iBATf,CASbD,kBATa;AAUrB,UAAME,KAAK,GAAGF,kBAAkB,IAAIA,kBAAkB,iCACjDL,eADiD;AAEpDC,QAAAA,aAAa,EAAbA,aAFoD;AAGpDC,QAAAA,kBAAkB,EAAlBA,kBAHoD;AAIpDM,QAAAA,QAAQ,EAAE,MAAKA,QAJqC;AAKpDT,QAAAA,KAAK,EAALA;AALoD,SAAtD;AAVqB,UAoBbU,OApBa,GAoBDV,KAAK,CAACW,UApBL,CAoBbD,OApBa;AAqBrB,UAAME,SAAS,GAAGF,OAAO,CAACG,MAAR,KAAmB,IAArC;;AACA,UAAMC,UAAU,GAAG,MAAKC,cAAL,EAAnB;;AACA,UAAIC,eAAJ;;AACA,UAAIJ,SAAS,IAAIE,UAAU,KAAK,OAA5B,IAAuC,CAACJ,OAAO,CAACO,iBAApD,EAAuE;AACrED,QAAAA,eAAe,GAAG;AAAEE,UAAAA,UAAU,EAAE,MAAK/B,KAAL,CAAWC;AAAzB,SAAlB;AACD;;AAED,aAAO,oBAAC,IAAD,eAAUa,eAAV;AAA2B,QAAA,GAAG,YAAUD,KAAK,CAACmB,GAA9C;AAAqD,QAAA,QAAQ,EAAE,MAAKV,QAApE;AAA8E,QAAA,YAAY,EAAER,eAAe,CAACQ,QAA5G;AAAsH,QAAA,aAAa,EAAED,KAArI;AAA4I,QAAA,WAAW,EAAEJ,eAAzJ;AAA0K,QAAA,KAAK,EAAE,CAACY,eAAD,EAAkBX,SAAlB,CAAjL;AAA+M,QAAA,KAAK,EAAEL,KAAtN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACF,MAAKoB,iBAAL,CAAuBpB,KAAvB,CADE,CAAP;AAGD,KA3nBkB;;AAEjB,UAAKqB,aAAL,GAAqBpF,KAAK,CAACqF,SAAN,EAArB;AACA,UAAKC,QAAL,GAAgB,IAAIC,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAhB;AACA,UAAKC,QAAL,GAAgB,IAAIF,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAhB;AACA,UAAKhC,cAAL,GAAsB,IAAI+B,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAtB;;AACA,QAAID,QAAQ,CAACG,QAAb,EAAuB;AACrB,YAAKC,aAAL,GAAqBJ,QAAQ,CAACG,QAAT,CAAkB,CAAlB,EAAqB,MAAKlC,cAA1B,CAArB;AACD,KAFD,MAEO;AACL,YAAKmC,aAAL,GAAqBJ,QAAQ,CAACK,GAAT,CAAa,CAAb,EAAgBL,QAAQ,CAACM,QAAT,CAAkB,CAAC,CAAnB,EAAsB,MAAKrC,cAA3B,CAAhB,CAArB;AACD;;AACD,UAAKsC,YAAL,GAAoBP,QAAQ,CAACQ,KAAT,CAAe,CAAC;AAClC/C,MAAAA,WAAW,EAAE;AACXgD,QAAAA,YAAY,EAAE,MAAKV,QADR;AAEXW,QAAAA,YAAY,EAAE,MAAKR;AAFR;AADqB,KAAD,CAAf,EAKhB;AACFS,MAAAA,eAAe,EAAE1D;AADf,KALgB,CAApB;AASA,UAAKU,KAAL,GAAa;AAMXC,MAAAA,oBAAoB,EAAEV,sBAAsB,CAACG,KAAK,CAACF,WAAP;AANjC,KAAb;AApBiB;AA4BlB;;;;kCAEaqB,K,EAAOc,U,EAAY;AAAA;;AAAA,UACvBJ,OADuB,GACXV,KAAK,CAACW,UADK,CACvBD,OADuB;AAAA,UAEvBG,MAFuB,GAEZH,OAFY,CAEvBG,MAFuB;;AAI/B,UAAIuB,OAAO,IAAI,OAAOvB,MAAP,KAAkB,QAAjC,EAA2C;AACzC,cAAM,IAAIwB,KAAJ,8BAAoCxB,MAApC,kFAAN;AACD;;AAED,UAAIA,MAAM,KAAK,IAAX,IAAmBC,UAAU,KAAK,QAAtC,EAAgD;AAC9C,eAAO,IAAP;AACD;;AAGD,UAAI7E,KAAK,CAACqG,cAAN,CAAqBzB,MAArB,CAAJ,EAAkC;AAChC,eAAOA,MAAP;AACD;;AAGD,UAAM0B,YAAY,GAAG1B,MAAM,IAAK,UAAAhC,KAAK;AAAA,eAAI,oBAAC,MAAD,eAAYA,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAJ;AAAA,OAArC;;AAlB+B,kCAyB3B,KAAK0B,iBAzBsB;AAAA,UAqB7BiC,sBArB6B,yBAqB7BA,sBArB6B;AAAA,UAsB7BC,uBAtB6B,yBAsB7BA,uBAtB6B;AAAA,UAuB7BC,uBAvB6B,yBAuB7BA,uBAvB6B;AAAA,UAwB7BC,4BAxB6B,yBAwB7BA,4BAxB6B;;AA2B/B,UAAMC,sCAAsC,GAAG,KAAKC,oCAAL,EAA/C;;AACA,UAAID,sCAAJ,EAA4C;AAC1CD,QAAAA,4BAA4B,GAAGC,sCAA/B;AACD;;AA9B8B,yBAgCW,KAAK/D,KAhChB;AAAA,UAgCvBoB,eAhCuB,gBAgCvBA,eAhCuB;AAAA,UAgCH6C,SAhCG;;AAkC/B,aAAO,oBAAC,kBAAD;AAAoB,QAAA,KAAK,EAAE9C,KAAK,CAACW,UAAN,CAAiBoC,UAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACFR,YAAY,+CACVO,SADU,GAEV7C,eAFU;AAGbQ,QAAAA,QAAQ,EAAE,KAAKA,QAHF;AAIbT,QAAAA,KAAK,EAALA,KAJa;AAKbgD,QAAAA,IAAI,EAAElC,UALO;AAMbmC,QAAAA,gBAAgB,EAAE,KAAKC,0BAAL,EANL;AAObC,QAAAA,YAAY,EAAE,KAAKC,sBAAL,EAPD;AAQbC,QAAAA,gBAAgB,EAAE,KAAKC,0BAAL,EARL;AASbC,QAAAA,gBAAgB,EAAEf,sBATL;AAUbgB,QAAAA,iBAAiB,EAAEf,uBAVN;AAWbgB,QAAAA,iBAAiB,EAAEf,uBAXN;AAYbgB,QAAAA,sBAAsB,EAAEf;AAZX,SADV,CAAP;AAgBD;;;2BAEMgB,Y,EAAcC,Q,EAAU;AAC7B,UAAIlG,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyBX,+BAA+B,EAA5D,EAAgE;AAC9DwE,QAAAA,QAAQ,CAACqC,MAAT,CAAgB,KAAKhF,KAAL,CAAWoB,eAAX,CAA2BQ,QAA3C,EAAqD;AACnDqD,UAAAA,OAAO,EAAEH,YAD0C;AAEnDI,UAAAA,SAAS,EAAE,IAFwC;AAGnDC,UAAAA,OAAO,EAAE,GAH0C;AAInDC,UAAAA,IAAI,EAAE,CAJ6C;AAKnDC,UAAAA,iBAAiB,EAAE,IALgC;AAMnDC,UAAAA,yBAAyB,EAAE,IANwB;AAOnDC,UAAAA,kBAAkB,EAAE,IAP+B;AAQnDjC,UAAAA,eAAe,EAAE1D;AARkC,SAArD,EASG4F,KATH;AAUD,OAXD,MAWO;AACL7C,QAAAA,QAAQ,CAAC8C,MAAT,CAAgB,KAAKzF,KAAL,CAAWoB,eAAX,CAA2BQ,QAA3C,EAAqD;AACnDqD,UAAAA,OAAO,EAAEH,YAD0C;AAEnDC,UAAAA,QAAQ,EAARA,QAFmD;AAGnDW,UAAAA,MAAM,EAAEzG,SAH2C;AAInDqE,UAAAA,eAAe,EAAE1D;AAJkC,SAArD,EAKG4F,KALH;AAMD;AACF;;;4BAEOG,a,EAAeZ,Q,EAAU;AAAA;;AAAA,kCACU,KAAK/E,KAAL,CAAWoB,eADrB;AAAA,UACvB8C,UADuB,yBACvBA,UADuB;AAAA,UACXtC,QADW,yBACXA,QADW;AAAA,UACDgE,MADC,yBACDA,MADC;AAE/B,UAAMX,OAAO,GAAGY,IAAI,CAACC,GAAL,CAASH,aAAa,GAAG,CAAzB,EAA4B,CAA5B,CAAhB;AAIA,WAAK1F,eAAL,GAAuBgF,OAAvB;;AAEA,UAAMc,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,QAAA,MAAI,CAAC9F,eAAL,GAAuB,IAAvB;AACA,YAAM+F,aAAa,GAAGJ,MAAM,CAACK,IAAP,CAAY,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACC,KAAF,KAAYlB,OAAO,GAAG,CAA1B;AAAA,SAAb,CAAtB;;AACA,YAAIe,aAAJ,EAAmB;AACjB9B,UAAAA,UAAU,CAACkC,QAAX,CAAoB7I,iBAAiB,CAAC8I,IAAlB,CAAuB;AACzC/D,YAAAA,GAAG,EAAE0D,aAAa,CAACM,KAAd,CAAoBhE,GADgB;AAEzCiE,YAAAA,SAAS,EAAE;AAF8B,WAAvB,CAApB;AAIArC,UAAAA,UAAU,CAACkC,QAAX,CAAoB9I,YAAY,CAACkJ,kBAAb,EAApB;AACD;AACF,OAVD;;AAYA,UAAI3H,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyBX,+BAA+B,EAA5D,EAAgE;AAC9DwE,QAAAA,QAAQ,CAACqC,MAAT,CAAgBpD,QAAhB,EAA0B;AACxBqD,UAAAA,OAAO,EAAPA,OADwB;AAExBC,UAAAA,SAAS,EAAE,IAFa;AAGxBC,UAAAA,OAAO,EAAE,GAHe;AAIxBC,UAAAA,IAAI,EAAE,CAJkB;AAKxBC,UAAAA,iBAAiB,EAAE,IALK;AAMxBC,UAAAA,yBAAyB,EAAE,IANH;AAOxBC,UAAAA,kBAAkB,EAAE,IAPI;AAQxBjC,UAAAA,eAAe,EAAE1D;AARO,SAA1B,EASG4F,KATH,CASSO,mBATT;AAUD,OAXD,MAWO;AACLpD,QAAAA,QAAQ,CAAC8C,MAAT,CAAgB7D,QAAhB,EAA0B;AACxBqD,UAAAA,OAAO,EAAPA,OADwB;AAExBF,UAAAA,QAAQ,EAARA,QAFwB;AAGxBW,UAAAA,MAAM,EAAEzG,SAHgB;AAIxBqE,UAAAA,eAAe,EAAE1D;AAJO,SAA1B,EAKG4F,KALH,CAKSO,mBALT;AAMD;AACF;;;uCASkB;AACjB,UAAI,KAAK/F,KAAL,KAAe,KAAKyG,UAAxB,EAAoC;AAClC;AACD;;AACD,WAAKA,UAAL,GAAkB,KAAKzG,KAAvB;;AAEA,WAAK0G,eAAL;;AACA,WAAKC,gBAAL;;AACA,WAAKC,wBAAL;AACD;;;6BAEQ;AACP,WAAKC,gBAAL;;AADO,UAGCzF,eAHD,GAGqB,KAAKpB,KAH1B,CAGCoB,eAHD;AAAA,UAMM+E,KANN,GASH/E,eATG,CAKL8C,UALK,CAMH5D,KANG,CAMM6F,KANN;AAAA,UAQLP,MARK,GASHxE,eATG,CAQLwE,MARK;;AAWP,UAAM3D,UAAU,GAAG,KAAKC,cAAL,EAAnB;;AACA,UAAI4E,cAAc,GAAG,IAArB;;AACA,UAAI7E,UAAU,KAAK,OAAnB,EAA4B;AAAA,YAClBd,KADkB,GACRC,eADQ,CAClBD,KADkB;AAE1B2F,QAAAA,cAAc,GAAG,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEC,MAAM,CAACD,cAApB;AAAoC,UAAA,aAAa,EAAC,UAAlD;AAA6D,UAAA,QAAQ,EAAE,KAAK5G,uBAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACZ,KAAK8G,aAAL,CAAmB7F,KAAnB,EAA0Bc,UAA1B,CADY,CAAjB;AAGD;;AAED,aAAO,oBAAC,iBAAD,eAAuB,KAAKgF,0BAAL,EAAvB;AAA0D,QAAA,GAAG,EAAE,KAAKzE,aAApE;AAAmF,QAAA,cAAc,EAAE,KAAKU,YAAxG;AAAsH,QAAA,oBAAoB,EAAE,KAAKzC,4BAAjJ;AAA+K,QAAA,OAAO,EAAE0F,KAAK,GAAG,CAAR,IAAa,KAAKe,iBAAL,EAArM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACH,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAE,CAACH,MAAM,CAACI,SAAR,EAAmB,KAAKzF,iBAAL,CAAuB0F,cAA1C,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,mBAAD,CAAqB,QAArB;AAA8B,QAAA,KAAK,EAAE,KAAK5E,aAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,eAAD;AAAiB,QAAA,KAAK,EAAEuE,MAAM,CAACnB,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,MAAM,CAACyB,GAAP,CAAW,KAAKnG,WAAhB,CADH,CADF,EAIG4F,cAJH,CADF,CADG,CAAP;AAUD;;;uCAEkBQ,S,EAAW;AAAA,UACbC,SADa,GACCD,SAAS,CAAClG,eAAV,CAA0B8C,UAD3B,CACpB5D,KADoB;AAAA,UAEpBA,KAFoB,GAEV,KAAKN,KAAL,CAAWoB,eAAX,CAA2B8C,UAFjB,CAEpB5D,KAFoB;;AAG5B,UAAIiH,SAAS,CAACpB,KAAV,KAAoB7F,KAAK,CAAC6F,KAA9B,EAAqC;AACnC,aAAKqB,mBAAL;AACD;AACF;;;kDAE6B;AAAA,UACpBrG,KADoB,GACV,KAAKnB,KAAL,CAAWoB,eADD,CACpBD,KADoB;AAAA,UAEpBU,OAFoB,GAERV,KAAK,CAACW,UAFE,CAEpBD,OAFoB;AAAA,kCAKxBA,OALwB,CAI1B4F,uBAJ0B;AAAA,UAIDC,2BAJC,sCAI6B,EAJ7B;AAQ5B,aAAO,KAAKC,QAAL,KAAkBD,2BAA2B,CAACE,QAA5B,IAAwCjI,kCAA1D,GAA+F+H,2BAA2B,CAACG,UAA5B,IAA0CnI,oCAAhJ;AACD;;;iDAE4B;AAAA,UACnBW,MADmB,GACR,KAAKL,KAAL,CAAWoB,eADH,CACnBf,MADmB;;AAE3B,UAAMoH,uBAAuB,GAAG,KAAKK,2BAAL,EAAhC;;AACA,UAAMC,gBAAgB,GAAG,KAAKC,iBAAL,EAAzB;;AAEA,UAAI,KAAKlH,iBAAL,EAAJ,EAA8B;AAC5B,YAAMnC,MAAM,GAAG0B,MAAM,CAAC1B,MAAP,CAAckC,UAAd,EAAf;;AAEA,eAAO;AACLoH,UAAAA,SAAS,EAAE,EADN;AAELC,UAAAA,UAAU,EAAEH,gBAAgB,GAAG,CAAC,CAAJ,GAAQ,CAF/B;AAGLI,UAAAA,OAAO,EAAEJ,gBAAgB,GAAG;AAAEK,YAAAA,GAAG,EAAE,CAACzJ,MAAD,GAAU8I;AAAjB,WAAH,GAAgD;AAAEY,YAAAA,MAAM,EAAE,CAAC1J,MAAD,GAAU8I;AAApB;AAHpE,SAAP;AAKD,OARD,MAQO;AACL,YAAMhJ,KAAK,GAAG4B,MAAM,CAAC5B,KAAP,CAAaoC,UAAb,EAAd;;AACA,YAAMsH,OAAO,GAAG,CAAC1J,KAAD,GAASgJ,uBAAzB;AAEA,eAAO;AACLa,UAAAA,UAAU,EAAEP,gBAAgB,GAAG,CAAC,CAAJ,GAAQ,CAD/B;AAELQ,UAAAA,SAAS,EAAE,EAFN;AAGLJ,UAAAA,OAAO,EAAEJ,gBAAgB,GAAG;AAAES,YAAAA,IAAI,EAAEL;AAAR,WAAH,GAAuB;AAAEM,YAAAA,KAAK,EAAEN;AAAT;AAH3C,SAAP;AAKD;AACF;;;wCAEmB;AAClB,UAAMO,eAAe,GAAG,KAAK1I,KAAL,CAAWoB,eAAX,CAA2BD,KAA3B,CAAiCW,UAAjC,CAA4CD,OAA5C,CAAoD6G,eAA5E;AACA,aAAO,OAAOA,eAAP,KAA2B,SAA3B,GAAuCA,eAAvC,GAAyD7J,QAAQ,CAACC,EAAT,KAAgB,KAAhF;AACD;;;wCAEmB;AAClB,aAAO,KAAK6I,QAAL,EAAP;AACD;;;+BAEU;AACT,aAAO,KAAK3H,KAAL,CAAWmE,IAAX,KAAoB,OAA3B;AACD;;;wCAGmB;AAAA,UAEGhD,KAFH,GAGd,KAAKnB,KAHS,CAEhBoB,eAFgB,CAEGD,KAFH;AAAA,UAIVU,OAJU,GAIEV,KAAK,CAACW,UAJR,CAIVD,OAJU;AAAA,UAKV8G,gBALU,GAKW9G,OALX,CAKV8G,gBALU;;AAOlB,UAAI,KAAKhB,QAAL,EAAJ,EAAqB;AACnB,eAAOgB,gBAAgB,KAAK,UAA5B;AACD,OAFD,MAEO;AACL,eAAO,OAAOA,gBAAP,KAA4B,QAA5B,GAAuCA,gBAAgB,KAAK,UAA5D,GAAyEC,WAAW,CAACC,KAA5F;AACD;AACF;;;0DAEgD;AAAA,UAAhBzF,YAAgB,SAAhBA,YAAgB;AAAA,mCAG3C,KAAKpD,KAHsC,CAE7CoB,eAF6C;AAAA,UAE1B8C,UAF0B,0BAE1BA,UAF0B;AAAA,UAEd7D,MAFc,0BAEdA,MAFc;AAAA,UAKvC8F,KALuC,GAK7BjC,UAAU,CAAC5D,KALkB,CAKvC6F,KALuC;;AAQ/C,UAAM2C,QAAQ,GAAGzI,MAAM,CAAC5B,KAAP,CAAaoC,UAAb,EAAjB;;AAEA,UAAMkI,CAAC,GAAG,KAAKf,iBAAL,KAA2B,CAAC,CAAD,GAAK5E,YAAhC,GAA+CA,YAAzD;AAEA,UAAM4F,KAAK,GAAG7C,KAAK,GAAG4C,CAAC,GAAGD,QAA1B;AACA,aAAO5K,KAAK,CAACiI,KAAK,GAAG,CAAT,EAAY6C,KAAZ,EAAmB7C,KAAnB,CAAZ;AACD;;;wDAE8C;AAAA,UAAhB9C,YAAgB,SAAhBA,YAAgB;AAAA,mCAGzC,KAAKrD,KAHoC,CAE3CoB,eAF2C;AAAA,UAExB8C,UAFwB,0BAExBA,UAFwB;AAAA,UAEZ7D,MAFY,0BAEZA,MAFY;AAAA,UAKrC8F,KALqC,GAK3BjC,UAAU,CAAC5D,KALgB,CAKrC6F,KALqC;;AAQ7C,UAAM2C,QAAQ,GAAGzI,MAAM,CAAC1B,MAAP,CAAckC,UAAd,EAAjB;;AAEA,UAAMoI,CAAC,GAAG,KAAKjB,iBAAL,KAA2B,CAAC,CAAD,GAAK3E,YAAhC,GAA+CA,YAAzD;AACA,UAAM2F,KAAK,GAAG7C,KAAK,GAAG8C,CAAC,GAAGH,QAA1B;AACA,aAAO5K,KAAK,CAACiI,KAAK,GAAG,CAAT,EAAY6C,KAAZ,EAAmB7C,KAAnB,CAAZ;AACD;;;0CAqCqB;AACpB,WAAKvF,cAAL,CAAoBK,QAApB,CAA6B,CAA7B;AACD;;;sCAEiB;AAChB,UAAI,CAAC,KAAKiG,iBAAL,EAAL,EAA+B;AAC7B,YAAI,KAAKtG,cAAL,CAAoBC,UAApB,OAAqC,CAAzC,EAA4C;AAC1C,eAAKD,cAAL,CAAoBK,QAApB,CAA6B,CAA7B;AACD;;AACD,aAAKiI,eAAL,GAAuBC,SAAvB;AACA;AACD;;AAGD,UAAI,KAAKnJ,KAAL,CAAWoB,eAAX,CAA2Bf,MAA3B,CAAkC5B,KAAlC,CAAwCoC,UAAxC,OAAyD,CAAzD,IAA8D,KAAKb,KAAL,CAAWoB,eAAX,CAA2Bf,MAA3B,CAAkC1B,MAAlC,CAAyCkC,UAAzC,OAA0D,CAA5H,EAA+H;AAC7H;AACD;;AAED,UAAI,KAAKC,iBAAL,EAAJ,EAA8B;AAC5B,aAAKsI,uBAAL;AACD,OAFD,MAEO;AACL,aAAKC,yBAAL;AACD;AACF;;;gDAE2B;AAAA,UAClBlD,KADkB,GACR,KAAKnG,KAAL,CAAWoB,eAAX,CAA2B8C,UAA3B,CAAsC5D,KAD9B,CAClB6F,KADkB;;AAG1B,UAAI,KAAK6B,iBAAL,EAAJ,EAA8B;AAC5B,aAAKkB,eAAL,GAAuBvG,QAAQ,CAACK,GAAT,CAAamD,KAAb,EAAoBxD,QAAQ,CAAC2G,MAAT,CAAgB,KAAK5G,QAArB,EAA+B,KAAK1C,KAAL,CAAWoB,eAAX,CAA2Bf,MAA3B,CAAkC5B,KAAjE,CAApB,EAA6F8K,WAA7F,CAAyG;AAC9HC,UAAAA,UAAU,EAAE,CAACrD,KAAK,GAAG,CAAT,EAAYA,KAAZ,CADkH;AAE9HsD,UAAAA,WAAW,EAAE,CAACtD,KAAK,GAAG,CAAT,EAAYA,KAAZ,CAFiH;AAG9HuD,UAAAA,WAAW,EAAE;AAHiH,SAAzG,CAAvB;AAKD,OAND,MAMO;AACL,aAAKR,eAAL,GAAuBvG,QAAQ,CAACK,GAAT,CAAamD,KAAb,EAAoBxD,QAAQ,CAACM,QAAT,CAAkB,CAAC,CAAnB,EAAsBN,QAAQ,CAAC2G,MAAT,CAAgB,KAAK5G,QAArB,EAA+B,KAAK1C,KAAL,CAAWoB,eAAX,CAA2Bf,MAA3B,CAAkC5B,KAAjE,CAAtB,CAApB,EAAoH8K,WAApH,CAAgI;AACrJC,UAAAA,UAAU,EAAE,CAACrD,KAAK,GAAG,CAAT,EAAYA,KAAZ,CADyI;AAErJsD,UAAAA,WAAW,EAAE,CAACtD,KAAK,GAAG,CAAT,EAAYA,KAAZ,CAFwI;AAGrJuD,UAAAA,WAAW,EAAE;AAHwI,SAAhI,CAAvB;AAKD;AACF;;;8CAEyB;AAAA,UAChBvD,KADgB,GACN,KAAKnG,KAAL,CAAWoB,eAAX,CAA2B8C,UAA3B,CAAsC5D,KADhC,CAChB6F,KADgB;;AAGxB,UAAI,KAAK6B,iBAAL,EAAJ,EAA8B;AAC5B,aAAKkB,eAAL,GAAuBvG,QAAQ,CAACK,GAAT,CAAamD,KAAb,EAAoBxD,QAAQ,CAAC2G,MAAT,CAAgB,KAAKzG,QAArB,EAA+B,KAAK7C,KAAL,CAAWoB,eAAX,CAA2Bf,MAA3B,CAAkC1B,MAAjE,CAApB,EAA8F4K,WAA9F,CAA0G;AAC/HC,UAAAA,UAAU,EAAE,CAACrD,KAAK,GAAG,CAAT,EAAYA,KAAZ,CADmH;AAE/HsD,UAAAA,WAAW,EAAE,CAACtD,KAAK,GAAG,CAAT,EAAYA,KAAZ,CAFkH;AAG/HuD,UAAAA,WAAW,EAAE;AAHkH,SAA1G,CAAvB;AAKD,OAND,MAMO;AACL,aAAKR,eAAL,GAAuBvG,QAAQ,CAACK,GAAT,CAAamD,KAAb,EAAoBxD,QAAQ,CAACM,QAAT,CAAkB,CAAC,CAAnB,EAAsBN,QAAQ,CAAC2G,MAAT,CAAgB,KAAKzG,QAArB,EAA+B,KAAK7C,KAAL,CAAWoB,eAAX,CAA2Bf,MAA3B,CAAkC1B,MAAjE,CAAtB,CAApB,EAAqH4K,WAArH,CAAiI;AACtJC,UAAAA,UAAU,EAAE,CAACrD,KAAK,GAAG,CAAT,EAAYA,KAAZ,CAD0I;AAEtJsD,UAAAA,WAAW,EAAE,CAACtD,KAAK,GAAG,CAAT,EAAYA,KAAZ,CAFyI;AAGtJuD,UAAAA,WAAW,EAAE;AAHyI,SAAjI,CAAvB;AAKD;AACF;;;6CAEwBtJ,W,EAAa;AAAA,mCAGhC,KAAKJ,KAH2B,CAElCoB,eAFkC;AAAA,UAEf8C,UAFe,0BAEfA,UAFe;AAAA,UAEHtC,QAFG,0BAEHA,QAFG;AAAA,UAEOvB,MAFP,0BAEOA,MAFP;AAAA,UAI5B8F,KAJ4B,GAIlBjC,UAAU,CAAC5D,KAJO,CAI5B6F,KAJ4B;AAKpC,UAAMwD,cAAc,GAAG,KAAK1J,eAAL,IAAwB,IAAxB,GAA+BkG,KAA/B,GAAuC,KAAKlG,eAAnE;;AAGA,UAAM6I,QAAQ,GAAGzI,MAAM,CAAC5B,KAAP,CAAaoC,UAAb,EAAjB;;AACA,UAAM+I,iBAAiB,GAAG,KAAK5B,iBAAL,KAA2B,CAAC,CAA5B,GAAgC,CAA1D;AACA,UAAM6B,aAAa,GAAGD,iBAAiB,GAAGxJ,WAAW,CAACgD,YAAtD;AACA,UAAM0G,eAAe,GAAGF,iBAAiB,GAAGxJ,WAAW,CAAC2J,SAAxD;AACA,UAAMC,eAAe,GAAGlB,QAAQ,GAAGtJ,kBAAnC;AACA,UAAMyK,QAAQ,GAAGpE,IAAI,CAACC,GAAL,CAASD,IAAI,CAACqE,GAAL,CAASJ,eAAT,CAAT,EAAoCE,eAApC,CAAjB;AACA,UAAMG,aAAa,GAAG,KAAKnC,iBAAL,KAA2B,CAACc,QAAQ,GAAGe,aAAZ,IAA6BI,QAAxD,GAAmEJ,aAAa,GAAGI,QAAzG;AACA,UAAMG,cAAc,GAAG,KAAKpC,iBAAL,KAA2B6B,aAAa,GAAGI,QAA3C,GAAsD,CAACnB,QAAQ,GAAGe,aAAZ,IAA6BI,QAA1G;;AAIA,UAAMjB,KAAK,GAAG,KAAKqB,8BAAL,CAAoCjK,WAApC,CAAd;;AACAwB,MAAAA,QAAQ,CAACX,QAAT,CAAkB+H,KAAlB;AACA,WAAKpI,cAAL,CAAoBK,QAApB,CAA6B,CAA7B;;AAIA,UAAI6I,eAAe,GAAG,CAAC,EAAvB,EAA2B;AACzB,aAAK9J,KAAL,CAAWsK,iBAAX,IAAgC,KAAKtK,KAAL,CAAWsK,iBAAX,EAAhC;;AACA,aAAKC,MAAL,CAAYZ,cAAZ,EAA4BQ,aAA5B;;AACA;AACD;;AACD,UAAIL,eAAe,GAAG,EAAtB,EAA0B;AACxB,aAAK9J,KAAL,CAAWwK,eAAX,IAA8B,KAAKxK,KAAL,CAAWwK,eAAX,EAA9B;;AACA,aAAKC,OAAL,CAAad,cAAb,EAA6BS,cAA7B;;AACA;AACD;;AAID,UAAIpB,KAAK,IAAI7C,KAAK,GAAG1G,kBAArB,EAAyC;AACvC,aAAKO,KAAL,CAAWwK,eAAX,IAA8B,KAAKxK,KAAL,CAAWwK,eAAX,EAA9B;;AACA,aAAKC,OAAL,CAAad,cAAb,EAA6BS,cAA7B;AACD,OAHD,MAGO;AACL,aAAKpK,KAAL,CAAWsK,iBAAX,IAAgC,KAAKtK,KAAL,CAAWsK,iBAAX,EAAhC;;AACA,aAAKC,MAAL,CAAYZ,cAAZ,EAA4BQ,aAA5B;AACD;AACF;;;2CAEsB/J,W,EAAa;AAAA,mCAG9B,KAAKJ,KAHyB,CAEhCoB,eAFgC;AAAA,UAEb8C,UAFa,0BAEbA,UAFa;AAAA,UAEDtC,QAFC,0BAEDA,QAFC;AAAA,UAESvB,MAFT,0BAESA,MAFT;AAAA,UAI1B8F,KAJ0B,GAIhBjC,UAAU,CAAC5D,KAJK,CAI1B6F,KAJ0B;AAKlC,UAAMwD,cAAc,GAAG,KAAK1J,eAAL,IAAwB,IAAxB,GAA+BkG,KAA/B,GAAuC,KAAKlG,eAAnE;;AAGA,UAAM6I,QAAQ,GAAGzI,MAAM,CAAC1B,MAAP,CAAckC,UAAd,EAAjB;;AACA,UAAMkH,gBAAgB,GAAG,KAAKC,iBAAL,EAAzB;;AACA,UAAM4B,iBAAiB,GAAG7B,gBAAgB,GAAG,CAAC,CAAJ,GAAQ,CAAlD;AACA,UAAM8B,aAAa,GAAGD,iBAAiB,GAAGxJ,WAAW,CAACiD,YAAtD;AACA,UAAMyG,eAAe,GAAGF,iBAAiB,GAAGxJ,WAAW,CAACsK,SAAxD;AACA,UAAMV,eAAe,GAAGlB,QAAQ,GAAGtJ,kBAAnC;AACA,UAAMyK,QAAQ,GAAGpE,IAAI,CAACC,GAAL,CAASD,IAAI,CAACqE,GAAL,CAASJ,eAAT,CAAT,EAAoCE,eAApC,CAAjB;AACA,UAAMG,aAAa,GAAGpC,gBAAgB,GAAG,CAACe,QAAQ,GAAGe,aAAZ,IAA6BI,QAAhC,GAA2CJ,aAAa,GAAGI,QAAjG;AACA,UAAMG,cAAc,GAAGrC,gBAAgB,GAAG8B,aAAa,GAAGI,QAAnB,GAA8B,CAACnB,QAAQ,GAAGe,aAAZ,IAA6BI,QAAlG;;AAEA,UAAMjB,KAAK,GAAG,KAAK2B,4BAAL,CAAkCvK,WAAlC,CAAd;;AACAwB,MAAAA,QAAQ,CAACX,QAAT,CAAkB+H,KAAlB;AACA,WAAKpI,cAAL,CAAoBK,QAApB,CAA6B,CAA7B;;AAIA,UAAI6I,eAAe,GAAG,CAAC,EAAvB,EAA2B;AACzB,aAAK9J,KAAL,CAAWsK,iBAAX,IAAgC,KAAKtK,KAAL,CAAWsK,iBAAX,EAAhC;;AACA,aAAKC,MAAL,CAAYZ,cAAZ,EAA4BQ,aAA5B;;AACA;AACD;;AACD,UAAIL,eAAe,GAAG,EAAtB,EAA0B;AACxB,aAAK9J,KAAL,CAAWwK,eAAX,IAA8B,KAAKxK,KAAL,CAAWwK,eAAX,EAA9B;;AACA,aAAKC,OAAL,CAAad,cAAb,EAA6BS,cAA7B;;AACA;AACD;;AAID,UAAIpB,KAAK,IAAI7C,KAAK,GAAG1G,kBAArB,EAAyC;AACvC,aAAKO,KAAL,CAAWwK,eAAX,IAA8B,KAAKxK,KAAL,CAAWwK,eAAX,EAA9B;;AACA,aAAKC,OAAL,CAAad,cAAb,EAA6BS,cAA7B;AACD,OAHD,MAGO;AACL,aAAKpK,KAAL,CAAWsK,iBAAX,IAAgC,KAAKtK,KAAL,CAAWsK,iBAAX,EAAhC;;AACA,aAAKC,MAAL,CAAYZ,cAAZ,EAA4BQ,aAA5B;AACD;AACF;;;qCAEgB;AACf,UAAI,KAAKnK,KAAL,CAAWiC,UAAf,EAA2B;AACzB,eAAO,KAAKjC,KAAL,CAAWiC,UAAlB;AACD;;AACD,UAAIpD,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6B,KAAKkB,KAAL,CAAWmE,IAAX,KAAoB,OAArD,EAA8D;AAC5D,eAAO,QAAP;AACD;;AACD,aAAO,OAAP;AACD;;;2DAEsC;AAAA,UAC7ByG,gCAD6B,GACQ,KAAK5K,KADb,CAC7B4K,gCAD6B;;AAErC,UAAIA,gCAAJ,EAAsC;AACpC,YAAIrL,mCAAmC,CAACsL,QAApC,CAA6CD,gCAA7C,CAAJ,EAAoF;AAClF,cAAIA,gCAAgC,KAAK,MAAzC,EAAiD;AAC/C,mBAAO5M,uBAAuB,CAAC8M,qBAA/B;AACD,WAFD,MAEO,IAAIF,gCAAgC,KAAK,WAAzC,EAAsD;AAC3D,mBAAO5M,uBAAuB,CAAC+M,4BAA/B;AACD,WAFM,MAEA,IAAIH,gCAAgC,KAAK,QAAzC,EAAmD;AACxD,mBAAO5M,uBAAuB,CAACgN,+BAA/B;AACD;AACF,SARD,MAQO,IAAIzH,OAAJ,EAAa;AAClB0H,UAAAA,OAAO,CAACC,KAAR,2FAAsG3L,mCAAmC,CAAC4L,IAApC,CAAyC,IAAzC,CAAtG,sBAAqKC,IAAI,CAACC,SAAL,CAAeT,gCAAf,CAArK;AACD;AACF;;AAED,aAAO,IAAP;AACD;;;6CAEwB;AAAA,UACfU,kBADe,GACQ,KAAKtL,KADb,CACfsL,kBADe;;AAEvB,UAAIA,kBAAJ,EAAwB;AACtB,YAAI/H,OAAJ,EAAa;AACX,cAAI,KAAKc,0BAAL,OAAsC,OAAtC,IAAiDiH,kBAAkB,KAAK,MAAxE,IAAkFzM,QAAQ,CAACC,EAAT,KAAgB,KAAtG,EAA6G;AAC3GmM,YAAAA,OAAO,CAACM,IAAR;AACD;AACF;;AACD,YAAIlM,oBAAoB,CAACwL,QAArB,CAA8BS,kBAA9B,CAAJ,EAAuD;AACrD,iBAAOA,kBAAP;AACD;;AAED,YAAI/H,OAAJ,EAAa;AACX0H,UAAAA,OAAO,CAACC,KAAR,6EAAwF7L,oBAAoB,CAAC8L,IAArB,CAA0B,IAA1B,CAAxF,sBAAwIC,IAAI,CAACC,SAAL,CAAeC,kBAAf,CAAxI;AACD;AACF;;AAED,UAAIzM,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,eAAO,MAAP;AACD,OAFD,MAEO;AACL,eAAO,QAAP;AACD;AACF;;;iDAE4B;AAG3B,UAAID,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6B,KAAKoD,cAAL,OAA0B,QAA3D,EAAqE;AACnE,eAAO,eAAP;AACD;;AAL0B,UAOnBsJ,sBAPmB,GAOQ,KAAKxL,KAPb,CAOnBwL,sBAPmB;;AAQ3B,UAAIA,sBAAJ,EAA4B;AAC1B,YAAIlM,wBAAwB,CAACuL,QAAzB,CAAkCW,sBAAlC,CAAJ,EAA+D;AAC7D,iBAAOA,sBAAP;AACD;;AAED,YAAIjI,OAAJ,EAAa;AACX0H,UAAAA,OAAO,CAACC,KAAR,iFAA4F5L,wBAAwB,CAAC6L,IAAzB,CAA8B,IAA9B,CAA5F,sBAAgJC,IAAI,CAACC,SAAL,CAAeG,sBAAf,CAAhJ;AACD;AACF;;AAED,aAAO,eAAP;AACD;;;iDAE4B;AAAA,UACnBC,sBADmB,GACQ,KAAKzL,KADb,CACnByL,sBADmB;;AAE3B,UAAMnH,YAAY,GAAG,KAAKC,sBAAL,EAArB;;AAIA,UAAMmH,gBAAgB,GAAG,EAAEpH,YAAY,KAAK,MAAjB,IAA2BzF,QAAQ,CAACC,EAAT,KAAgB,SAA7C,CAAzB;AAEA,aAAO,OAAO2M,sBAAP,KAAkC,SAAlC,GAA8CA,sBAA9C,GAAuEC,gBAA9E;AACD;;;sCAEiBvK,K,EAAO;AAAA,8BACcA,KAAK,CAACW,UADpB;AAAA,UACfoC,UADe,qBACfA,UADe;AAAA,UACHyH,YADG,qBACHA,YADG;AAEvB,UAAMC,cAAc,GAAGD,YAAY,EAAnC;AAFuB,UAIfE,WAJe,GAIC,KAAK7L,KAJN,CAIf6L,WAJe;;AAKvB,UAAM5J,UAAU,GAAG,KAAKC,cAAL,EAAnB;;AACA,UAAID,UAAU,KAAK,QAAnB,EAA6B;AAC3B,eAAO,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE8E,MAAM,CAACI,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACH,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEJ,MAAM,CAACnB,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,SAAD;AAAW,UAAA,WAAW,EAAEiG,WAAxB;AAAqC,UAAA,UAAU,EAAE3H,UAAjD;AAA6D,UAAA,SAAS,EAAE0H,cAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADG,EAIF,KAAK5E,aAAL,CAAmB7F,KAAnB,EAA0Bc,UAA1B,CAJE,CAAP;AAMD;;AACD,aAAO,oBAAC,SAAD;AAAW,QAAA,WAAW,EAAE4J,WAAxB;AAAqC,QAAA,UAAU,EAAE3H,UAAjD;AAA6D,QAAA,SAAS,EAAE0H,cAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;+CAE0B;AACzB,WAAKlK,iBAAL,GAAyB3D,iBAAiB,CAAC+N,mBAAlB,CAAsC,KAAK9L,KAAL,CAAW+L,gBAAjD,kCACpB,KAAK/L,KAAL,CAAWoB,eADS;AAEvBQ,QAAAA,QAAQ,EAAE,KAAKA;AAFQ,UAGtB,KAAK5B,KAAL,CAAWgM,mBAHW,EAGU,KAAKrE,QAAL,EAHV,CAAzB;AAID;;;uCAEkB;AACjB,UAAI,KAAKuB,eAAT,EAA0B;AACxB,aAAKtH,QAAL,GAAgBe,QAAQ,CAACK,GAAT,CAAaL,QAAQ,CAACM,QAAT,CAAkB,KAAKjD,KAAL,CAAWoB,eAAX,CAA2BQ,QAA7C,EAAuD,KAAKhB,cAA5D,CAAb,EAA0F+B,QAAQ,CAACM,QAAT,CAAkB,KAAKiG,eAAvB,EAAwC,KAAKnG,aAA7C,CAA1F,CAAhB;AACD,OAFD,MAEO;AACL,aAAKnB,QAAL,GAAgB,KAAK5B,KAAL,CAAWoB,eAAX,CAA2BQ,QAA3C;AACD;AACF;;;;EApmB2BxE,KAAK,CAAC6O,S;;AAwoBpC,IAAMlF,MAAM,GAAGmF,UAAU,CAACC,MAAX,CAAkB;AAC/BhF,EAAAA,SAAS,EAAE;AACTiF,IAAAA,IAAI,EAAE,CADG;AAMTC,IAAAA,aAAa,EAAE,gBANN;AAOTC,IAAAA,QAAQ,EAAE;AAPD,GADoB;AAU/B1G,EAAAA,MAAM,EAAE;AACNwG,IAAAA,IAAI,EAAE;AADA,GAVuB;AAa/BtF,EAAAA,cAAc,EAAE;AACdlF,IAAAA,QAAQ,EAAE,UADI;AAEd4G,IAAAA,IAAI,EAAE,CAFQ;AAGdJ,IAAAA,GAAG,EAAE,CAHS;AAIdK,IAAAA,KAAK,EAAE;AAJO;AAbe,CAAlB,CAAf;AAqBA,eAAehL,eAAe,CAACsC,eAAD,CAA9B","sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet, Platform, View, I18nManager, Easing, Dimensions } from 'react-native';\nimport { SceneView, StackActions, NavigationActions, NavigationProvider } from '@react-navigation/core';\nimport { withOrientation } from '@react-navigation/native';\nimport { ScreenContainer } from 'react-native-screens';\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\n\nimport Card from './StackViewCard';\nimport Header from '../Header/Header';\nimport TransitionConfigs from './StackViewTransitionConfigs';\nimport HeaderStyleInterpolator from '../Header/HeaderStyleInterpolator';\nimport StackGestureContext from '../../utils/StackGestureContext';\nimport clamp from '../../utils/clamp';\nimport { supportsImprovedSpringAnimation } from '../../utils/ReactNativeFeatures';\n\nconst IPHONE_XS_HEIGHT = 812; // iPhone X and XS\nconst IPHONE_XR_HEIGHT = 896; // iPhone XR and XS Max\nconst { width: WINDOW_WIDTH, height: WINDOW_HEIGHT } = Dimensions.get('window');\nconst IS_IPHONE_X = Platform.OS === 'ios' && !Platform.isPad && !Platform.isTVOS && (WINDOW_HEIGHT === IPHONE_XS_HEIGHT || WINDOW_WIDTH === IPHONE_XS_HEIGHT || WINDOW_HEIGHT === IPHONE_XR_HEIGHT || WINDOW_WIDTH === IPHONE_XR_HEIGHT);\n\nconst EaseInOut = Easing.inOut(Easing.ease);\n\n/**\n * Enumerate possible values for validation\n */\nconst HEADER_LAYOUT_PRESET = ['center', 'left'];\nconst HEADER_TRANSITION_PRESET = ['fade-in-place', 'uikit'];\nconst HEADER_BACKGROUND_TRANSITION_PRESET = ['toggle', 'fade', 'translate'];\n\n/**\n * The max duration of the card animation in milliseconds after released gesture.\n * The actual duration should be always less then that because the rest distance\n * is always less then the full distance of the layout.\n */\nconst ANIMATION_DURATION = 500;\n\n/**\n * The gesture distance threshold to trigger the back behavior. For instance,\n * `1/2` means that moving greater than 1/2 of the width of the screen will\n * trigger a back action\n */\nconst POSITION_THRESHOLD = 1 / 2;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst USE_NATIVE_DRIVER = true;\n\nconst getDefaultHeaderHeight = isLandscape => {\n  if (Platform.OS === 'ios') {\n    if (isLandscape && !Platform.isPad) {\n      return 32;\n    } else if (IS_IPHONE_X) {\n      return 88;\n    } else {\n      return 64;\n    }\n  } else {\n    return 56;\n  }\n};\n\nclass StackViewLayout extends React.Component {\n  /**\n   * immediateIndex is used to represent the expected index that we will be on after a\n   * transition. To achieve a smooth animation when swiping back, the action to go back\n   * doesn't actually fire until the transition completes. The immediateIndex is used during\n   * the transition so that gestures can be handled correctly. This is a work-around for\n   * cases when the user quickly swipes back several times.\n   */\n  _immediateIndex = null;\n\n  constructor(props) {\n    super(props);\n    this.panGestureRef = React.createRef();\n    this.gestureX = new Animated.Value(0);\n    this.gestureY = new Animated.Value(0);\n    this.positionSwitch = new Animated.Value(1);\n    if (Animated.subtract) {\n      this.gestureSwitch = Animated.subtract(1, this.positionSwitch);\n    } else {\n      this.gestureSwitch = Animated.add(1, Animated.multiply(-1, this.positionSwitch));\n    }\n    this.gestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: this.gestureX,\n        translationY: this.gestureY\n      }\n    }], {\n      useNativeDriver: USE_NATIVE_DRIVER\n    });\n\n    this.state = {\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape)\n    };\n  }\n\n  _renderHeader(scene, headerMode) {\n    const { options } = scene.descriptor;\n    const { header } = options;\n\n    if (__DEV__ && typeof header === 'string') {\n      throw new Error(`Invalid header value: \"${header}\". The header option must be a valid React component or null, not a string.`);\n    }\n\n    if (header === null && headerMode === 'screen') {\n      return null;\n    }\n\n    // check if it's a react element\n    if (React.isValidElement(header)) {\n      return header;\n    }\n\n    // Handle the case where the header option is a function, and provide the default\n    const renderHeader = header || (props => <Header {...props} />);\n\n    let {\n      headerLeftInterpolator,\n      headerTitleInterpolator,\n      headerRightInterpolator,\n      headerBackgroundInterpolator\n    } = this._transitionConfig;\n\n    const backgroundTransitionPresetInterpolator = this._getHeaderBackgroundTransitionPreset();\n    if (backgroundTransitionPresetInterpolator) {\n      headerBackgroundInterpolator = backgroundTransitionPresetInterpolator;\n    }\n\n    const { transitionProps, ...passProps } = this.props;\n\n    return <NavigationProvider value={scene.descriptor.navigation}>\n        {renderHeader({\n        ...passProps,\n        ...transitionProps,\n        position: this.position,\n        scene,\n        mode: headerMode,\n        transitionPreset: this._getHeaderTransitionPreset(),\n        layoutPreset: this._getHeaderLayoutPreset(),\n        backTitleVisible: this._getHeaderBackTitleVisible(),\n        leftInterpolator: headerLeftInterpolator,\n        titleInterpolator: headerTitleInterpolator,\n        rightInterpolator: headerRightInterpolator,\n        backgroundInterpolator: headerBackgroundInterpolator\n      })}\n      </NavigationProvider>;\n  }\n\n  _reset(resetToIndex, duration) {\n    if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n      Animated.spring(this.props.transitionProps.position, {\n        toValue: resetToIndex,\n        stiffness: 6000,\n        damping: 100,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01,\n        useNativeDriver: USE_NATIVE_DRIVER\n      }).start();\n    } else {\n      Animated.timing(this.props.transitionProps.position, {\n        toValue: resetToIndex,\n        duration,\n        easing: EaseInOut,\n        useNativeDriver: USE_NATIVE_DRIVER\n      }).start();\n    }\n  }\n\n  _goBack(backFromIndex, duration) {\n    const { navigation, position, scenes } = this.props.transitionProps;\n    const toValue = Math.max(backFromIndex - 1, 0);\n\n    // set temporary index for gesture handler to respect until the action is\n    // dispatched at the end of the transition.\n    this._immediateIndex = toValue;\n\n    const onCompleteAnimation = () => {\n      this._immediateIndex = null;\n      const backFromScene = scenes.find(s => s.index === toValue + 1);\n      if (backFromScene) {\n        navigation.dispatch(NavigationActions.back({\n          key: backFromScene.route.key,\n          immediate: true\n        }));\n        navigation.dispatch(StackActions.completeTransition());\n      }\n    };\n\n    if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n      Animated.spring(position, {\n        toValue,\n        stiffness: 7000,\n        damping: 300,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01,\n        useNativeDriver: USE_NATIVE_DRIVER\n      }).start(onCompleteAnimation);\n    } else {\n      Animated.timing(position, {\n        toValue,\n        duration,\n        easing: EaseInOut,\n        useNativeDriver: USE_NATIVE_DRIVER\n      }).start(onCompleteAnimation);\n    }\n  }\n\n  _onFloatingHeaderLayout = e => {\n    const { height } = e.nativeEvent.layout;\n    if (height !== this.state.floatingHeaderHeight) {\n      this.setState({ floatingHeaderHeight: height });\n    }\n  };\n\n  _prepareAnimated() {\n    if (this.props === this._prevProps) {\n      return;\n    }\n    this._prevProps = this.props;\n\n    this._prepareGesture();\n    this._preparePosition();\n    this._prepareTransitionConfig();\n  }\n\n  render() {\n    this._prepareAnimated();\n\n    const { transitionProps } = this.props;\n    const {\n      navigation: {\n        state: { index }\n      },\n      scenes\n    } = transitionProps;\n\n    const headerMode = this._getHeaderMode();\n    let floatingHeader = null;\n    if (headerMode === 'float') {\n      const { scene } = transitionProps;\n      floatingHeader = <View style={styles.floatingHeader} pointerEvents=\"box-none\" onLayout={this._onFloatingHeaderLayout}>\n          {this._renderHeader(scene, headerMode)}\n        </View>;\n    }\n\n    return <PanGestureHandler {...this._gestureActivationCriteria()} ref={this.panGestureRef} onGestureEvent={this.gestureEvent} onHandlerStateChange={this._handlePanGestureStateChange} enabled={index > 0 && this._isGestureEnabled()}>\n        <Animated.View style={[styles.container, this._transitionConfig.containerStyle]}>\n          <StackGestureContext.Provider value={this.panGestureRef}>\n            <ScreenContainer style={styles.scenes}>\n              {scenes.map(this._renderCard)}\n            </ScreenContainer>\n            {floatingHeader}\n          </StackGestureContext.Provider>\n        </Animated.View>\n      </PanGestureHandler>;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { state: prevState } = prevProps.transitionProps.navigation;\n    const { state } = this.props.transitionProps.navigation;\n    if (prevState.index !== state.index) {\n      this._maybeCancelGesture();\n    }\n  }\n\n  _getGestureResponseDistance() {\n    const { scene } = this.props.transitionProps;\n    const { options } = scene.descriptor;\n    const {\n      gestureResponseDistance: userGestureResponseDistance = {}\n    } = options;\n\n    // Doesn't make sense for a response distance of 0, so this works fine\n    return this._isModal() ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n  }\n\n  _gestureActivationCriteria() {\n    const { layout } = this.props.transitionProps;\n    const gestureResponseDistance = this._getGestureResponseDistance();\n    const isMotionInverted = this._isMotionInverted();\n\n    if (this._isMotionVertical()) {\n      const height = layout.height.__getValue();\n\n      return {\n        maxDeltaX: 15,\n        minOffsetY: isMotionInverted ? -5 : 5,\n        hitSlop: isMotionInverted ? { top: -height + gestureResponseDistance } : { bottom: -height + gestureResponseDistance }\n      };\n    } else {\n      const width = layout.width.__getValue();\n      const hitSlop = -width + gestureResponseDistance;\n\n      return {\n        minOffsetX: isMotionInverted ? -5 : 5,\n        maxDeltaY: 20,\n        hitSlop: isMotionInverted ? { left: hitSlop } : { right: hitSlop }\n      };\n    }\n  }\n\n  _isGestureEnabled() {\n    const gesturesEnabled = this.props.transitionProps.scene.descriptor.options.gesturesEnabled;\n    return typeof gesturesEnabled === 'boolean' ? gesturesEnabled : Platform.OS === 'ios';\n  }\n\n  _isMotionVertical() {\n    return this._isModal();\n  }\n\n  _isModal() {\n    return this.props.mode === 'modal';\n  }\n\n  // This only currently applies to the horizontal gesture!\n  _isMotionInverted() {\n    const {\n      transitionProps: { scene }\n    } = this.props;\n    const { options } = scene.descriptor;\n    const { gestureDirection } = options;\n\n    if (this._isModal()) {\n      return gestureDirection === 'inverted';\n    } else {\n      return typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : I18nManager.isRTL;\n    }\n  }\n\n  _computeHorizontalGestureValue({ translationX }) {\n    const {\n      transitionProps: { navigation, layout }\n    } = this.props;\n\n    const { index } = navigation.state;\n\n    // TODO: remove this __getValue!\n    const distance = layout.width.__getValue();\n\n    const x = this._isMotionInverted() ? -1 * translationX : translationX;\n\n    const value = index - x / distance;\n    return clamp(index - 1, value, index);\n  }\n\n  _computeVerticalGestureValue({ translationY }) {\n    const {\n      transitionProps: { navigation, layout }\n    } = this.props;\n\n    const { index } = navigation.state;\n\n    // TODO: remove this __getValue!\n    const distance = layout.height.__getValue();\n\n    const y = this._isMotionInverted() ? -1 * translationY : translationY;\n    const value = index - y / distance;\n    return clamp(index - 1, value, index);\n  }\n\n  _handlePanGestureStateChange = ({ nativeEvent }) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      // Gesture was cancelled! For example, some navigation state update\n      // arrived while the gesture was active that cancelled it out\n      if (this.positionSwitch.__getValue() === 1) {\n        return;\n      }\n\n      if (this._isMotionVertical()) {\n        this._handleReleaseVertical(nativeEvent);\n      } else {\n        this._handleReleaseHorizontal(nativeEvent);\n      }\n    } else if (nativeEvent.state === State.ACTIVE) {\n      // Switch to using gesture position\n      this.positionSwitch.setValue(0);\n\n      // By enabling the gesture switch and ignoring the position here we\n      // end up with a quick jump to the initial value and then back to the\n      // gesture. While this isn't ideal, it's preferred over preventing new\n      // gestures during the animation (all gestures should be interruptible)\n      // and we will properly fix it (interruptible and from the correct position)\n      // when we integrate reanimated. If you prefer to prevent gestures during\n      // transitions, then fork this library, comment the positionSwitch value set above,\n      // and uncomment the following two lines.\n      // if (!this.props.transitionProps.position._animation) {\n      //   this.positionSwitch.setValue(0);\n      // }\n    }\n  };\n\n  // note: this will not animated so nicely because the position is unaware\n  // of the gesturePosition, so if we are in the middle of swiping the screen away\n  // and back is programatically fired then we will reset to the initial position\n  // and animate from there\n  _maybeCancelGesture() {\n    this.positionSwitch.setValue(1);\n  }\n\n  _prepareGesture() {\n    if (!this._isGestureEnabled()) {\n      if (this.positionSwitch.__getValue() !== 1) {\n        this.positionSwitch.setValue(1);\n      }\n      this.gesturePosition = undefined;\n      return;\n    }\n\n    // We can't run the gesture if width or height layout is unavailable\n    if (this.props.transitionProps.layout.width.__getValue() === 0 || this.props.transitionProps.layout.height.__getValue() === 0) {\n      return;\n    }\n\n    if (this._isMotionVertical()) {\n      this._prepareGestureVertical();\n    } else {\n      this._prepareGestureHorizontal();\n    }\n  }\n\n  _prepareGestureHorizontal() {\n    const { index } = this.props.transitionProps.navigation.state;\n\n    if (this._isMotionInverted()) {\n      this.gesturePosition = Animated.add(index, Animated.divide(this.gestureX, this.props.transitionProps.layout.width)).interpolate({\n        inputRange: [index - 1, index],\n        outputRange: [index - 1, index],\n        extrapolate: 'clamp'\n      });\n    } else {\n      this.gesturePosition = Animated.add(index, Animated.multiply(-1, Animated.divide(this.gestureX, this.props.transitionProps.layout.width))).interpolate({\n        inputRange: [index - 1, index],\n        outputRange: [index - 1, index],\n        extrapolate: 'clamp'\n      });\n    }\n  }\n\n  _prepareGestureVertical() {\n    const { index } = this.props.transitionProps.navigation.state;\n\n    if (this._isMotionInverted()) {\n      this.gesturePosition = Animated.add(index, Animated.divide(this.gestureY, this.props.transitionProps.layout.height)).interpolate({\n        inputRange: [index - 1, index],\n        outputRange: [index - 1, index],\n        extrapolate: 'clamp'\n      });\n    } else {\n      this.gesturePosition = Animated.add(index, Animated.multiply(-1, Animated.divide(this.gestureY, this.props.transitionProps.layout.height))).interpolate({\n        inputRange: [index - 1, index],\n        outputRange: [index - 1, index],\n        extrapolate: 'clamp'\n      });\n    }\n  }\n\n  _handleReleaseHorizontal(nativeEvent) {\n    const {\n      transitionProps: { navigation, position, layout }\n    } = this.props;\n    const { index } = navigation.state;\n    const immediateIndex = this._immediateIndex == null ? index : this._immediateIndex;\n\n    // Calculate animate duration according to gesture speed and moved distance\n    const distance = layout.width.__getValue();\n    const movementDirection = this._isMotionInverted() ? -1 : 1;\n    const movedDistance = movementDirection * nativeEvent.translationX;\n    const gestureVelocity = movementDirection * nativeEvent.velocityX;\n    const defaultVelocity = distance / ANIMATION_DURATION;\n    const velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n    const resetDuration = this._isMotionInverted() ? (distance - movedDistance) / velocity : movedDistance / velocity;\n    const goBackDuration = this._isMotionInverted() ? movedDistance / velocity : (distance - movedDistance) / velocity;\n\n    // Get the current position value and reset to using the statically driven\n    // (rather than gesture driven) position.\n    const value = this._computeHorizontalGestureValue(nativeEvent);\n    position.setValue(value);\n    this.positionSwitch.setValue(1);\n\n    // If the speed of the gesture release is significant, use that as the indication\n    // of intent\n    if (gestureVelocity < -50) {\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n      this._reset(immediateIndex, resetDuration);\n      return;\n    }\n    if (gestureVelocity > 50) {\n      this.props.onGestureFinish && this.props.onGestureFinish();\n      this._goBack(immediateIndex, goBackDuration);\n      return;\n    }\n\n    // Then filter based on the distance the screen was moved. Over a third of the way swiped,\n    // and the back will happen.\n    if (value <= index - POSITION_THRESHOLD) {\n      this.props.onGestureFinish && this.props.onGestureFinish();\n      this._goBack(immediateIndex, goBackDuration);\n    } else {\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n      this._reset(immediateIndex, resetDuration);\n    }\n  }\n\n  _handleReleaseVertical(nativeEvent) {\n    const {\n      transitionProps: { navigation, position, layout }\n    } = this.props;\n    const { index } = navigation.state;\n    const immediateIndex = this._immediateIndex == null ? index : this._immediateIndex;\n\n    // Calculate animate duration according to gesture speed and moved distance\n    const distance = layout.height.__getValue();\n    const isMotionInverted = this._isMotionInverted();\n    const movementDirection = isMotionInverted ? -1 : 1;\n    const movedDistance = movementDirection * nativeEvent.translationY;\n    const gestureVelocity = movementDirection * nativeEvent.velocityY;\n    const defaultVelocity = distance / ANIMATION_DURATION;\n    const velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n    const resetDuration = isMotionInverted ? (distance - movedDistance) / velocity : movedDistance / velocity;\n    const goBackDuration = isMotionInverted ? movedDistance / velocity : (distance - movedDistance) / velocity;\n\n    const value = this._computeVerticalGestureValue(nativeEvent);\n    position.setValue(value);\n    this.positionSwitch.setValue(1);\n\n    // If the speed of the gesture release is significant, use that as the indication\n    // of intent\n    if (gestureVelocity < -50) {\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n      this._reset(immediateIndex, resetDuration);\n      return;\n    }\n    if (gestureVelocity > 50) {\n      this.props.onGestureFinish && this.props.onGestureFinish();\n      this._goBack(immediateIndex, goBackDuration);\n      return;\n    }\n\n    // Then filter based on the distance the screen was moved. Over a third of the way swiped,\n    // and the back will happen.\n    if (value <= index - POSITION_THRESHOLD) {\n      this.props.onGestureFinish && this.props.onGestureFinish();\n      this._goBack(immediateIndex, goBackDuration);\n    } else {\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n      this._reset(immediateIndex, resetDuration);\n    }\n  }\n\n  _getHeaderMode() {\n    if (this.props.headerMode) {\n      return this.props.headerMode;\n    }\n    if (Platform.OS === 'android' || this.props.mode === 'modal') {\n      return 'screen';\n    }\n    return 'float';\n  }\n\n  _getHeaderBackgroundTransitionPreset() {\n    const { headerBackgroundTransitionPreset } = this.props;\n    if (headerBackgroundTransitionPreset) {\n      if (HEADER_BACKGROUND_TRANSITION_PRESET.includes(headerBackgroundTransitionPreset)) {\n        if (headerBackgroundTransitionPreset === 'fade') {\n          return HeaderStyleInterpolator.forBackgroundWithFade;\n        } else if (headerBackgroundTransitionPreset === 'translate') {\n          return HeaderStyleInterpolator.forBackgroundWithTranslation;\n        } else if (headerBackgroundTransitionPreset === 'toggle') {\n          return HeaderStyleInterpolator.forBackgroundWithInactiveHidden;\n        }\n      } else if (__DEV__) {\n        console.error(`Invalid configuration applied for headerBackgroundTransitionPreset - expected one of ${HEADER_BACKGROUND_TRANSITION_PRESET.join(', ')} but received ${JSON.stringify(headerBackgroundTransitionPreset)}`);\n      }\n    }\n\n    return null;\n  }\n\n  _getHeaderLayoutPreset() {\n    const { headerLayoutPreset } = this.props;\n    if (headerLayoutPreset) {\n      if (__DEV__) {\n        if (this._getHeaderTransitionPreset() === 'uikit' && headerLayoutPreset === 'left' && Platform.OS === 'ios') {\n          console.warn(`headerTransitionPreset with the value 'uikit' is incompatible with headerLayoutPreset 'left'`);\n        }\n      }\n      if (HEADER_LAYOUT_PRESET.includes(headerLayoutPreset)) {\n        return headerLayoutPreset;\n      }\n\n      if (__DEV__) {\n        console.error(`Invalid configuration applied for headerLayoutPreset - expected one of ${HEADER_LAYOUT_PRESET.join(', ')} but received ${JSON.stringify(headerLayoutPreset)}`);\n      }\n    }\n\n    if (Platform.OS === 'android') {\n      return 'left';\n    } else {\n      return 'center';\n    }\n  }\n\n  _getHeaderTransitionPreset() {\n    // On Android or with header mode screen, we always just use in-place,\n    // we ignore the option entirely (at least until we have other presets)\n    if (Platform.OS === 'android' || this._getHeaderMode() === 'screen') {\n      return 'fade-in-place';\n    }\n\n    const { headerTransitionPreset } = this.props;\n    if (headerTransitionPreset) {\n      if (HEADER_TRANSITION_PRESET.includes(headerTransitionPreset)) {\n        return headerTransitionPreset;\n      }\n\n      if (__DEV__) {\n        console.error(`Invalid configuration applied for headerTransitionPreset - expected one of ${HEADER_TRANSITION_PRESET.join(', ')} but received ${JSON.stringify(headerTransitionPreset)}`);\n      }\n    }\n\n    return 'fade-in-place';\n  }\n\n  _getHeaderBackTitleVisible() {\n    const { headerBackTitleVisible } = this.props;\n    const layoutPreset = this._getHeaderLayoutPreset();\n\n    // Even when we align to center on Android, people should need to opt-in to\n    // showing the back title\n    const enabledByDefault = !(layoutPreset === 'left' || Platform.OS === 'android');\n\n    return typeof headerBackTitleVisible === 'boolean' ? headerBackTitleVisible : enabledByDefault;\n  }\n\n  _renderInnerScene(scene) {\n    const { navigation, getComponent } = scene.descriptor;\n    const SceneComponent = getComponent();\n\n    const { screenProps } = this.props;\n    const headerMode = this._getHeaderMode();\n    if (headerMode === 'screen') {\n      return <View style={styles.container}>\n          <View style={styles.scenes}>\n            <SceneView screenProps={screenProps} navigation={navigation} component={SceneComponent} />\n          </View>\n          {this._renderHeader(scene, headerMode)}\n        </View>;\n    }\n    return <SceneView screenProps={screenProps} navigation={navigation} component={SceneComponent} />;\n  }\n\n  _prepareTransitionConfig() {\n    this._transitionConfig = TransitionConfigs.getTransitionConfig(this.props.transitionConfig, {\n      ...this.props.transitionProps,\n      position: this.position\n    }, this.props.lastTransitionProps, this._isModal());\n  }\n\n  _preparePosition() {\n    if (this.gesturePosition) {\n      this.position = Animated.add(Animated.multiply(this.props.transitionProps.position, this.positionSwitch), Animated.multiply(this.gesturePosition, this.gestureSwitch));\n    } else {\n      this.position = this.props.transitionProps.position;\n    }\n  }\n\n  _renderCard = scene => {\n    const {\n      transitionProps,\n      shadowEnabled,\n      cardOverlayEnabled,\n      transparentCard,\n      cardStyle\n    } = this.props;\n\n    const { screenInterpolator } = this._transitionConfig;\n    const style = screenInterpolator && screenInterpolator({\n      ...transitionProps,\n      shadowEnabled,\n      cardOverlayEnabled,\n      position: this.position,\n      scene\n    });\n\n    // When using a floating header, we need to add some top\n    // padding on the scene.\n    const { options } = scene.descriptor;\n    const hasHeader = options.header !== null;\n    const headerMode = this._getHeaderMode();\n    let paddingTopStyle;\n    if (hasHeader && headerMode === 'float' && !options.headerTransparent) {\n      paddingTopStyle = { paddingTop: this.state.floatingHeaderHeight };\n    }\n\n    return <Card {...transitionProps} key={`card_${scene.key}`} position={this.position} realPosition={transitionProps.position} animatedStyle={style} transparent={transparentCard} style={[paddingTopStyle, cardStyle]} scene={scene}>\n        {this._renderInnerScene(scene)}\n      </Card>;\n  };\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    // Header is physically rendered after scenes so that Header won't be\n    // covered by the shadows of the scenes.\n    // That said, we'd have use `flexDirection: 'column-reverse'` to move\n    // Header above the scenes.\n    flexDirection: 'column-reverse',\n    overflow: 'hidden'\n  },\n  scenes: {\n    flex: 1\n  },\n  floatingHeader: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0\n  }\n});\n\nexport default withOrientation(StackViewLayout);"]},"metadata":{},"sourceType":"module"}