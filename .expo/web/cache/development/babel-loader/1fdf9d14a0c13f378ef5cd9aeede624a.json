{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/devonhubert/languages/javascript/react_native/PayCheck/node_modules/react-navigation-stack/dist/views/StackView/StackViewCard.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Screen } from 'react-native-screens';\nimport createPointerEventsContainer from \"./createPointerEventsContainer\";\nvar EPS = 1e-5;\n\nfunction getAccessibilityProps(isActive) {\n  if (Platform.OS === 'ios') {\n    return {\n      accessibilityElementsHidden: !isActive\n    };\n  } else if (Platform.OS === 'android') {\n    return {\n      importantForAccessibility: isActive ? 'yes' : 'no-hide-descendants'\n    };\n  } else {\n    return null;\n  }\n}\n\nvar Card = function (_React$Component) {\n  _inherits(Card, _React$Component);\n\n  var _super = _createSuper(Card);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          pointerEvents = _this$props.pointerEvents,\n          style = _this$props.style,\n          position = _this$props.position,\n          transparent = _this$props.transparent,\n          _this$props$scene = _this$props.scene,\n          index = _this$props$scene.index,\n          isActive = _this$props$scene.isActive;\n      var active = transparent || isActive ? 1 : position.interpolate({\n        inputRange: [index, index + 1 - EPS, index + 1],\n        outputRange: [1, 1, 0],\n        extrapolate: 'clamp'\n      });\n      var animatedStyle = this.props.animatedStyle || {};\n\n      var shadowOpacity = animatedStyle.shadowOpacity,\n          overlayOpacity = animatedStyle.overlayOpacity,\n          containerAnimatedStyle = _objectWithoutProperties(animatedStyle, [\"shadowOpacity\", \"overlayOpacity\"]);\n\n      var flattenedStyle = StyleSheet.flatten(style) || {};\n\n      var backgroundColor = flattenedStyle.backgroundColor,\n          screenStyle = _objectWithoutProperties(flattenedStyle, [\"backgroundColor\"]);\n\n      return React.createElement(Screen, {\n        pointerEvents: pointerEvents,\n        onComponentRef: this.props.onComponentRef,\n        style: [StyleSheet.absoluteFill, containerAnimatedStyle, screenStyle],\n        active: active,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 12\n        }\n      }, !transparent && shadowOpacity ? React.createElement(Animated.View, {\n        style: [styles.shadow, {\n          shadowOpacity: shadowOpacity\n        }],\n        pointerEvents: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 42\n        }\n      }) : null, React.createElement(Animated.View, _extends({}, getAccessibilityProps(isActive), {\n        style: [transparent ? styles.transparent : styles.card, backgroundColor && backgroundColor !== 'transparent' ? {\n          backgroundColor: backgroundColor\n        } : null],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }\n      }), children), overlayOpacity ? React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [styles.overlay, {\n          opacity: overlayOpacity\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 27\n        }\n      }) : null);\n    }\n  }]);\n\n  return Card;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  overlay: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    backgroundColor: '#000'\n  }),\n  shadow: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowOffset: {\n      width: -1,\n      height: 1\n    },\n    shadowRadius: 5,\n    shadowColor: '#000'\n  },\n  transparent: {\n    flex: 1,\n    backgroundColor: 'transparent'\n  }\n});\nexport default createPointerEventsContainer(Card);","map":{"version":3,"sources":["/Users/devonhubert/languages/javascript/react_native/PayCheck/node_modules/react-navigation-stack/dist/views/StackView/StackViewCard.js"],"names":["React","Screen","createPointerEventsContainer","EPS","getAccessibilityProps","isActive","Platform","OS","accessibilityElementsHidden","importantForAccessibility","Card","props","children","pointerEvents","style","position","transparent","scene","index","active","interpolate","inputRange","outputRange","extrapolate","animatedStyle","shadowOpacity","overlayOpacity","containerAnimatedStyle","flattenedStyle","StyleSheet","flatten","backgroundColor","screenStyle","onComponentRef","absoluteFill","styles","shadow","card","overlay","opacity","Component","create","flex","absoluteFillObject","top","left","bottom","width","shadowOffset","height","shadowRadius","shadowColor"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,MAAT,QAAuB,sBAAvB;AACA,OAAOC,4BAAP;AAEA,IAAMC,GAAG,GAAG,IAAZ;;AACA,SAASC,qBAAT,CAA+BC,QAA/B,EAAyC;AACvC,MAAIC,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACzB,WAAO;AACLC,MAAAA,2BAA2B,EAAE,CAACH;AADzB,KAAP;AAGD,GAJD,MAIO,IAAIC,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AACpC,WAAO;AACLE,MAAAA,yBAAyB,EAAEJ,QAAQ,GAAG,KAAH,GAAW;AADzC,KAAP;AAGD,GAJM,MAIA;AACL,WAAO,IAAP;AACD;AACF;;IAKKK,I;;;;;;;;;;;;;6BACK;AAAA,wBAQH,KAAKC,KARF;AAAA,UAELC,QAFK,eAELA,QAFK;AAAA,UAGLC,aAHK,eAGLA,aAHK;AAAA,UAILC,KAJK,eAILA,KAJK;AAAA,UAKLC,QALK,eAKLA,QALK;AAAA,UAMLC,WANK,eAMLA,WANK;AAAA,0CAOLC,KAPK;AAAA,UAOIC,KAPJ,qBAOIA,KAPJ;AAAA,UAOWb,QAPX,qBAOWA,QAPX;AAUP,UAAMc,MAAM,GAAGH,WAAW,IAAIX,QAAf,GAA0B,CAA1B,GAA8BU,QAAQ,CAACK,WAAT,CAAqB;AAChEC,QAAAA,UAAU,EAAE,CAACH,KAAD,EAAQA,KAAK,GAAG,CAAR,GAAYf,GAApB,EAAyBe,KAAK,GAAG,CAAjC,CADoD;AAEhEI,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFmD;AAGhEC,QAAAA,WAAW,EAAE;AAHmD,OAArB,CAA7C;AAOA,UAAMC,aAAa,GAAG,KAAKb,KAAL,CAAWa,aAAX,IAA4B,EAAlD;;AAjBO,UAoBLC,aApBK,GAuBHD,aAvBG,CAoBLC,aApBK;AAAA,UAqBLC,cArBK,GAuBHF,aAvBG,CAqBLE,cArBK;AAAA,UAsBFC,sBAtBE,4BAuBHH,aAvBG;;AAyBP,UAAII,cAAc,GAAGC,UAAU,CAACC,OAAX,CAAmBhB,KAAnB,KAA6B,EAAlD;;AAzBO,UA0BDiB,eA1BC,GA0BmCH,cA1BnC,CA0BDG,eA1BC;AAAA,UA0BmBC,WA1BnB,4BA0BmCJ,cA1BnC;;AA4BP,aAAO,oBAAC,MAAD;AAAQ,QAAA,aAAa,EAAEf,aAAvB;AAAsC,QAAA,cAAc,EAAE,KAAKF,KAAL,CAAWsB,cAAjE;AAAiF,QAAA,KAAK,EAAE,CAACJ,UAAU,CAACK,YAAZ,EAA0BP,sBAA1B,EAAkDK,WAAlD,CAAxF;AAAwJ,QAAA,MAAM,EAAEb,MAAhK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACF,CAACH,WAAD,IAAgBS,aAAhB,GAAgC,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAE,CAACU,MAAM,CAACC,MAAR,EAAgB;AAAEX,UAAAA,aAAa,EAAbA;AAAF,SAAhB,CAAtB;AAA0D,QAAA,aAAa,EAAC,MAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAhC,GAAoH,IADlH,EAEH,oBAAC,QAAD,CAAU,IAAV,eAAmBrB,qBAAqB,CAACC,QAAD,CAAxC;AAAoD,QAAA,KAAK,EAAE,CAACW,WAAW,GAAGmB,MAAM,CAACnB,WAAV,GAAwBmB,MAAM,CAACE,IAA3C,EAAiDN,eAAe,IAAIA,eAAe,KAAK,aAAvC,GAAuD;AAAEA,UAAAA,eAAe,EAAfA;AAAF,SAAvD,GAA6E,IAA9H,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACGnB,QADH,CAFG,EAKFc,cAAc,GAAG,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,aAAa,EAAC,MAA7B;AAAoC,QAAA,KAAK,EAAE,CAACS,MAAM,CAACG,OAAR,EAAiB;AAAEC,UAAAA,OAAO,EAAEb;AAAX,SAAjB,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,GAAkG,IAL9G,CAAP;AAOD;;;;EApCgB1B,KAAK,CAACwC,S;;AAuCzB,IAAML,MAAM,GAAGN,UAAU,CAACY,MAAX,CAAkB;AAC/BJ,EAAAA,IAAI,EAAE;AACJK,IAAAA,IAAI,EAAE,CADF;AAEJX,IAAAA,eAAe,EAAE;AAFb,GADyB;AAK/BO,EAAAA,OAAO,kCACFT,UAAU,CAACc,kBADT;AAELZ,IAAAA,eAAe,EAAE;AAFZ,IALwB;AAS/BK,EAAAA,MAAM,EAAE;AACNQ,IAAAA,GAAG,EAAE,CADC;AAENC,IAAAA,IAAI,EAAE,CAFA;AAGNC,IAAAA,MAAM,EAAE,CAHF;AAINC,IAAAA,KAAK,EAAE,CAJD;AAKNhC,IAAAA,QAAQ,EAAE,UALJ;AAMNgB,IAAAA,eAAe,EAAE,MANX;AAONiB,IAAAA,YAAY,EAAE;AAAED,MAAAA,KAAK,EAAE,CAAC,CAAV;AAAaE,MAAAA,MAAM,EAAE;AAArB,KAPR;AAQNC,IAAAA,YAAY,EAAE,CARR;AASNC,IAAAA,WAAW,EAAE;AATP,GATuB;AAoB/BnC,EAAAA,WAAW,EAAE;AACX0B,IAAAA,IAAI,EAAE,CADK;AAEXX,IAAAA,eAAe,EAAE;AAFN;AApBkB,CAAlB,CAAf;AA0BA,eAAe7B,4BAA4B,CAACQ,IAAD,CAA3C","sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet, Platform } from 'react-native';\nimport { Screen } from 'react-native-screens';\nimport createPointerEventsContainer from './createPointerEventsContainer';\n\nconst EPS = 1e-5;\nfunction getAccessibilityProps(isActive) {\n  if (Platform.OS === 'ios') {\n    return {\n      accessibilityElementsHidden: !isActive\n    };\n  } else if (Platform.OS === 'android') {\n    return {\n      importantForAccessibility: isActive ? 'yes' : 'no-hide-descendants'\n    };\n  } else {\n    return null;\n  }\n}\n\n/**\n * Component that renders the scene as card for the <StackView />.\n */\nclass Card extends React.Component {\n  render() {\n    const {\n      children,\n      pointerEvents,\n      style,\n      position,\n      transparent,\n      scene: { index, isActive }\n    } = this.props;\n\n    const active = transparent || isActive ? 1 : position.interpolate({\n      inputRange: [index, index + 1 - EPS, index + 1],\n      outputRange: [1, 1, 0],\n      extrapolate: 'clamp'\n    });\n\n    // animatedStyle can be `false` if there is no screen interpolator\n    const animatedStyle = this.props.animatedStyle || {};\n\n    const {\n      shadowOpacity,\n      overlayOpacity,\n      ...containerAnimatedStyle\n    } = animatedStyle;\n\n    let flattenedStyle = StyleSheet.flatten(style) || {};\n    let { backgroundColor, ...screenStyle } = flattenedStyle;\n\n    return <Screen pointerEvents={pointerEvents} onComponentRef={this.props.onComponentRef} style={[StyleSheet.absoluteFill, containerAnimatedStyle, screenStyle]} active={active}>\n        {!transparent && shadowOpacity ? <Animated.View style={[styles.shadow, { shadowOpacity }]} pointerEvents=\"none\" /> : null}\n        <Animated.View {...getAccessibilityProps(isActive)} style={[transparent ? styles.transparent : styles.card, backgroundColor && backgroundColor !== 'transparent' ? { backgroundColor } : null]}>\n          {children}\n        </Animated.View>\n        {overlayOpacity ? <Animated.View pointerEvents=\"none\" style={[styles.overlay, { opacity: overlayOpacity }]} /> : null}\n      </Screen>;\n  }\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    top: 0,\n    left: 0,\n    bottom: 0,\n    width: 3,\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowOffset: { width: -1, height: 1 },\n    shadowRadius: 5,\n    shadowColor: '#000'\n  },\n  transparent: {\n    flex: 1,\n    backgroundColor: 'transparent'\n  }\n});\n\nexport default createPointerEventsContainer(Card);"]},"metadata":{},"sourceType":"module"}