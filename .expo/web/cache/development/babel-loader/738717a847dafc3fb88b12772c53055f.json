{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _NavigationActions = require(\"../NavigationActions\");\n\nvar _NavigationActions2 = _interopRequireDefault(_NavigationActions);\n\nvar _StackActions = require(\"./StackActions\");\n\nvar _StackActions2 = _interopRequireDefault(_StackActions);\n\nvar _createConfigGetter = require(\"./createConfigGetter\");\n\nvar _createConfigGetter2 = _interopRequireDefault(_createConfigGetter);\n\nvar _getScreenForRouteName = require(\"./getScreenForRouteName\");\n\nvar _getScreenForRouteName2 = _interopRequireDefault(_getScreenForRouteName);\n\nvar _StateUtils = require(\"../StateUtils\");\n\nvar _StateUtils2 = _interopRequireDefault(_StateUtils);\n\nvar _validateRouteConfigMap = require(\"./validateRouteConfigMap\");\n\nvar _validateRouteConfigMap2 = _interopRequireDefault(_validateRouteConfigMap);\n\nvar _invariant = require(\"../utils/invariant\");\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _KeyGenerator = require(\"./KeyGenerator\");\n\nvar _pathUtils = require(\"./pathUtils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction behavesLikePushAction(action) {\n  return action.type === _NavigationActions2.default.NAVIGATE || action.type === _StackActions2.default.PUSH;\n}\n\nvar defaultActionCreators = function defaultActionCreators() {\n  return {};\n};\n\nfunction isResetToRootStack(action) {\n  return action.type === _StackActions2.default.RESET && action.key === null;\n}\n\nexports.default = function (routeConfigs) {\n  var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _validateRouteConfigMap2.default)(routeConfigs);\n  var childRouters = {};\n  var routeNames = Object.keys(routeConfigs);\n  routeNames.forEach(function (routeName) {\n    var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n\n    if (screen && screen.router) {\n      childRouters[routeName] = screen.router;\n    } else {\n      childRouters[routeName] = null;\n    }\n  });\n  var initialRouteParams = stackConfig.initialRouteParams;\n  var getCustomActionCreators = stackConfig.getCustomActionCreators || defaultActionCreators;\n  var initialRouteName = stackConfig.initialRouteName || routeNames[0];\n  var initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    var route = {};\n    var childRouter = childRouters[action.routeName];\n\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      var childState = {};\n\n      if (childRouter !== null) {\n        var childAction = action.action || _NavigationActions2.default.init({\n          params: action.params\n        });\n\n        childState = childRouter.getStateForAction(childAction);\n      }\n\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [_extends({\n          params: action.params\n        }, childState, {\n          key: action.key || (0, _KeyGenerator.generateKey)(),\n          routeName: action.routeName\n        })]\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(_NavigationActions2.default.navigate({\n        routeName: initialRouteName,\n        params: initialRouteParams\n      }));\n    }\n\n    var params = (routeConfigs[initialRouteName].params || route.params || action.params || initialRouteParams) && _extends({}, routeConfigs[initialRouteName].params || {}, route.params || {}, action.params || {}, initialRouteParams || {});\n\n    var initialRouteKey = stackConfig.initialRouteKey;\n    route = _extends({}, route, params ? {\n      params: params\n    } : {}, {\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || (0, _KeyGenerator.generateKey)()\n    });\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route]\n    };\n  }\n\n  function getParamsForRouteAndAction(routeName, action) {\n    var routeConfig = routeConfigs[routeName];\n\n    if (routeConfig && routeConfig.params) {\n      return _extends({}, routeConfig.params, action.params);\n    } else {\n      return action.params;\n    }\n  }\n\n  var _ref = (0, _pathUtils.createPathParser)(childRouters, routeConfigs, stackConfig),\n      getPathAndParamsForRoute = _ref.getPathAndParamsForRoute,\n      _getActionForPathAndParams = _ref.getActionForPathAndParams;\n\n  return {\n    childRouters: childRouters,\n    getComponentForState: function getComponentForState(state) {\n      var activeChildRoute = state.routes[state.index];\n      var routeName = activeChildRoute.routeName;\n\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n\n      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    },\n    getComponentForRouteName: function getComponentForRouteName(routeName) {\n      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    },\n    getActionCreators: function getActionCreators(route, navStateKey) {\n      return _extends({}, getCustomActionCreators(route, navStateKey), {\n        pop: function pop(n, params) {\n          return _StackActions2.default.pop(_extends({\n            n: n\n          }, params));\n        },\n        popToTop: function popToTop(params) {\n          return _StackActions2.default.popToTop(params);\n        },\n        push: function push(routeName, params, action) {\n          return _StackActions2.default.push({\n            routeName: routeName,\n            params: params,\n            action: action\n          });\n        },\n        replace: function replace(replaceWith, params, action, newKey) {\n          if (typeof replaceWith === 'string') {\n            return _StackActions2.default.replace({\n              routeName: replaceWith,\n              params: params,\n              action: action,\n              key: route.key,\n              newKey: newKey\n            });\n          }\n\n          (0, _invariant2.default)(typeof replaceWith === 'object', 'Must replaceWith an object or a string');\n          (0, _invariant2.default)(params == null, 'Params must not be provided to .replace() when specifying an object');\n          (0, _invariant2.default)(action == null, 'Child action must not be provided to .replace() when specifying an object');\n          (0, _invariant2.default)(newKey == null, 'Child action must not be provided to .replace() when specifying an object');\n          return _StackActions2.default.replace(replaceWith);\n        },\n        reset: function reset(actions, index) {\n          return _StackActions2.default.reset({\n            actions: actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey\n          });\n        },\n        dismiss: function dismiss() {\n          return _NavigationActions2.default.back({\n            key: navStateKey\n          });\n        }\n      });\n    },\n    getStateForAction: function getStateForAction(action, state) {\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      var activeChildRoute = state.routes[state.index];\n\n      if (!isResetToRootStack(action) && action.type !== _NavigationActions2.default.NAVIGATE) {\n        var activeChildRouter = childRouters[activeChildRoute.routeName];\n\n        if (activeChildRouter) {\n          var route = activeChildRouter.getStateForAction(action, activeChildRoute);\n\n          if (route !== null && route !== activeChildRoute) {\n            return _StateUtils2.default.replaceAt(state, activeChildRoute.key, route, action.type === _NavigationActions2.default.SET_PARAMS);\n          }\n        }\n      } else if (action.type === _NavigationActions2.default.NAVIGATE) {\n        for (var _iterator = _createForOfIteratorHelperLoose(state.routes.slice().reverse()), _step; !(_step = _iterator()).done;) {\n          var childRoute = _step.value;\n          var childRouter = childRouters[childRoute.routeName];\n          var childAction = action.routeName === childRoute.routeName && action.action ? action.action : action;\n\n          if (childRouter) {\n            var nextRouteState = childRouter.getStateForAction(childAction, childRoute);\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              var newState = _StateUtils2.default.replaceAndPrune(state, nextRouteState ? nextRouteState.key : childRoute.key, nextRouteState ? nextRouteState : childRoute);\n\n              return _extends({}, newState, {\n                isTransitioning: state.index !== newState.index ? action.immediate !== true : state.isTransitioning\n              });\n            }\n          }\n        }\n      }\n\n      if (behavesLikePushAction(action) && childRouters[action.routeName] !== undefined) {\n          var _childRouter = childRouters[action.routeName];\n\n          var _route = void 0;\n\n          (0, _invariant2.default)(action.type !== _StackActions2.default.PUSH || action.key == null, 'StackRouter does not support key on the push action');\n          var lastRouteIndex = state.routes.findIndex(function (r) {\n            if (action.key) {\n              return r.key === action.key;\n            } else {\n              return r.routeName === action.routeName;\n            }\n          });\n\n          if (action.type !== _StackActions2.default.PUSH && lastRouteIndex !== -1) {\n            if (state.index === lastRouteIndex && !action.params) {\n              return null;\n            }\n\n            var routes = state.routes.slice(0, lastRouteIndex + 1);\n\n            if (action.params) {\n              var _route2 = state.routes[lastRouteIndex];\n              routes[lastRouteIndex] = _extends({}, _route2, {\n                params: _extends({}, _route2.params, action.params)\n              });\n            }\n\n            return _extends({}, state, {\n              isTransitioning: state.index !== lastRouteIndex ? action.immediate !== true : state.isTransitioning,\n              index: lastRouteIndex,\n              routes: routes\n            });\n          }\n\n          if (_childRouter) {\n            var _childAction = action.action || _NavigationActions2.default.init({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            });\n\n            _route = _extends({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            }, _childRouter.getStateForAction(_childAction), {\n              routeName: action.routeName,\n              key: action.key || (0, _KeyGenerator.generateKey)()\n            });\n          } else {\n            _route = {\n              params: getParamsForRouteAndAction(action.routeName, action),\n              routeName: action.routeName,\n              key: action.key || (0, _KeyGenerator.generateKey)()\n            };\n          }\n\n          return _extends({}, _StateUtils2.default.push(state, _route), {\n            isTransitioning: action.immediate !== true\n          });\n        } else if (action.type === _StackActions2.default.PUSH && childRouters[action.routeName] === undefined) {\n        return state;\n      }\n\n      if (behavesLikePushAction(action)) {\n        var childRouterNames = Object.keys(childRouters);\n\n        for (var i = 0; i < childRouterNames.length; i++) {\n          var childRouterName = childRouterNames[i];\n          var _childRouter2 = childRouters[childRouterName];\n\n          if (_childRouter2) {\n            var initChildRoute = _childRouter2.getStateForAction(_NavigationActions2.default.init());\n\n            var navigatedChildRoute = _childRouter2.getStateForAction(action, initChildRoute);\n\n            var routeToPush = null;\n\n            if (navigatedChildRoute === null) {\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              routeToPush = navigatedChildRoute;\n            }\n\n            if (routeToPush) {\n              var _route3 = _extends({}, routeToPush, {\n                routeName: childRouterName,\n                key: action.key || (0, _KeyGenerator.generateKey)()\n              });\n\n              return _extends({}, _StateUtils2.default.push(state, _route3), {\n                isTransitioning: action.immediate !== true\n              });\n            }\n          }\n        }\n      }\n\n      if (action.type === _StackActions2.default.POP_TO_TOP) {\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        if (state.index > 0) {\n          return _extends({}, state, {\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]]\n          });\n        }\n\n        return state;\n      }\n\n      if (action.type === _StackActions2.default.REPLACE) {\n        var routeIndex = void 0;\n\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex(function (r) {\n            return r.key === action.key;\n          });\n        }\n\n        if (routeIndex !== -1) {\n          var _childRouter3 = childRouters[action.routeName];\n          var childState = {};\n\n          if (_childRouter3) {\n            var _childAction2 = action.action || _NavigationActions2.default.init({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            });\n\n            childState = _childRouter3.getStateForAction(_childAction2);\n          }\n\n          var _routes = _toConsumableArray(state.routes);\n\n          _routes[routeIndex] = _extends({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          }, childState, {\n            routeName: action.routeName,\n            key: action.newKey || (0, _KeyGenerator.generateKey)()\n          });\n          return _extends({}, state, {\n            routes: _routes\n          });\n        }\n      }\n\n      if (action.type === _StackActions2.default.COMPLETE_TRANSITION && (action.key == null || action.key === state.key) && action.toChildKey === state.routes[state.index].key && state.isTransitioning) {\n        return _extends({}, state, {\n          isTransitioning: false\n        });\n      }\n\n      if (action.type === _NavigationActions2.default.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n\n        if (lastRoute) {\n          var params = _extends({}, lastRoute.params, action.params);\n\n          var _routes2 = _toConsumableArray(state.routes);\n\n          _routes2[state.routes.indexOf(lastRoute)] = _extends({}, lastRoute, {\n            params: params\n          });\n          return _extends({}, state, {\n            routes: _routes2\n          });\n        }\n      }\n\n      if (action.type === _StackActions2.default.RESET) {\n        if (action.key != null && action.key != state.key) {\n          return state;\n        }\n\n        var newStackActions = action.actions;\n        return _extends({}, state, {\n          routes: newStackActions.map(function (newStackAction) {\n            var router = childRouters[newStackAction.routeName];\n            var childState = {};\n\n            if (router) {\n              var _childAction3 = newStackAction.action || _NavigationActions2.default.init({\n                params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n              });\n\n              childState = router.getStateForAction(_childAction3);\n            }\n\n            return _extends({\n              params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n            }, childState, {\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || (0, _KeyGenerator.generateKey)()\n            });\n          }),\n          index: action.index\n        });\n      }\n\n      if (action.type === _NavigationActions2.default.BACK || action.type === _StackActions2.default.POP) {\n        var _key = action.key,\n            n = action.n,\n            immediate = action.immediate;\n        var backRouteIndex = state.index;\n\n        if (action.type === _StackActions2.default.POP && n != null) {\n          backRouteIndex = Math.max(1, state.index - n + 1);\n        } else if (_key) {\n          var backRoute = state.routes.find(function (route) {\n            return route.key === _key;\n          });\n          backRouteIndex = state.routes.indexOf(backRoute);\n        }\n\n        if (backRouteIndex > 0) {\n          return _extends({}, state, {\n            routes: state.routes.slice(0, backRouteIndex),\n            index: backRouteIndex - 1,\n            isTransitioning: immediate !== true\n          });\n        }\n      }\n\n      var keyIndex = action.key ? _StateUtils2.default.indexOf(state, action.key) : -1;\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(state.routes.slice().reverse()), _step2; !(_step2 = _iterator2()).done;) {\n        var _childRoute = _step2.value;\n\n        if (_childRoute.key === activeChildRoute.key) {\n          continue;\n        }\n\n        if (keyIndex >= 0 && _childRoute.key !== action.key) {\n          continue;\n        }\n\n        var _childRouter4 = childRouters[_childRoute.routeName];\n\n        if (_childRouter4) {\n          var _route4 = _childRouter4.getStateForAction(action, _childRoute);\n\n          if (_route4 === null) {\n            return state;\n          } else if (_route4 && _route4 !== _childRoute) {\n            return _StateUtils2.default.replaceAt(state, _childRoute.key, _route4, action.type === _NavigationActions2.default.SET_PARAMS || action.type === _StackActions2.default.COMPLETE_TRANSITION || action.type.includes('DRAWER'));\n          }\n        }\n      }\n\n      return state;\n    },\n    getPathAndParamsForState: function getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams: function getActionForPathAndParams(path, params) {\n      return _getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, stackConfig.defaultNavigationOptions)\n  };\n};","map":{"version":3,"sources":["/Users/devonhubert/languages/javascript/react_native/PayCheck/node_modules/@react-navigation/core/dist/routers/StackRouter.js"],"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_NavigationActions","require","_NavigationActions2","_interopRequireDefault","_StackActions","_StackActions2","_createConfigGetter","_createConfigGetter2","_getScreenForRouteName","_getScreenForRouteName2","_StateUtils","_StateUtils2","_validateRouteConfigMap","_validateRouteConfigMap2","_invariant","_invariant2","_KeyGenerator","_pathUtils","obj","__esModule","default","behavesLikePushAction","action","type","NAVIGATE","PUSH","defaultActionCreators","isResetToRootStack","RESET","routeConfigs","stackConfig","childRouters","routeNames","keys","forEach","routeName","screen","router","initialRouteParams","getCustomActionCreators","initialRouteName","initialChildRouter","getInitialState","route","childRouter","undefined","childState","childAction","init","params","getStateForAction","isTransitioning","index","routes","generateKey","navigate","initialRouteKey","getParamsForRouteAndAction","routeConfig","createPathParser","getPathAndParamsForRoute","getActionForPathAndParams","getComponentForState","state","activeChildRoute","getComponentForRouteName","getActionCreators","navStateKey","pop","n","popToTop","push","replace","replaceWith","newKey","reset","actions","dismiss","back","activeChildRouter","replaceAt","SET_PARAMS","slice","reverse","childRoute","nextRouteState","newState","replaceAndPrune","immediate","_childRouter","_route","lastRouteIndex","findIndex","r","_route2","_childAction","childRouterNames","childRouterName","_childRouter2","initChildRoute","navigatedChildRoute","routeToPush","_route3","POP_TO_TOP","REPLACE","routeIndex","_childRouter3","_childAction2","_routes","COMPLETE_TRANSITION","toChildKey","lastRoute","find","_routes2","indexOf","newStackActions","map","newStackAction","_childAction3","BACK","POP","_key","backRouteIndex","Math","max","backRoute","keyIndex","_childRoute","_childRouter4","_route4","includes","getPathAndParamsForState","path","getScreenOptions","defaultNavigationOptions"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _NavigationActions = require('../NavigationActions');\n\nvar _NavigationActions2 = _interopRequireDefault(_NavigationActions);\n\nvar _StackActions = require('./StackActions');\n\nvar _StackActions2 = _interopRequireDefault(_StackActions);\n\nvar _createConfigGetter = require('./createConfigGetter');\n\nvar _createConfigGetter2 = _interopRequireDefault(_createConfigGetter);\n\nvar _getScreenForRouteName = require('./getScreenForRouteName');\n\nvar _getScreenForRouteName2 = _interopRequireDefault(_getScreenForRouteName);\n\nvar _StateUtils = require('../StateUtils');\n\nvar _StateUtils2 = _interopRequireDefault(_StateUtils);\n\nvar _validateRouteConfigMap = require('./validateRouteConfigMap');\n\nvar _validateRouteConfigMap2 = _interopRequireDefault(_validateRouteConfigMap);\n\nvar _invariant = require('../utils/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _KeyGenerator = require('./KeyGenerator');\n\nvar _pathUtils = require('./pathUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction behavesLikePushAction(action) {\n  return action.type === _NavigationActions2.default.NAVIGATE || action.type === _StackActions2.default.PUSH;\n}\n\nvar defaultActionCreators = () => ({});\n\nfunction isResetToRootStack(action) {\n  return action.type === _StackActions2.default.RESET && action.key === null;\n}\n\nexports.default = (routeConfigs, stackConfig = {}) => {\n  // Fail fast on invalid route definitions\n  (0, _validateRouteConfigMap2.default)(routeConfigs);\n\n  var childRouters = {};\n  var routeNames = Object.keys(routeConfigs);\n\n  // Loop through routes and find child routers\n  routeNames.forEach(routeName => {\n    var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    if (screen && screen.router) {\n      // If it has a router it's a navigator.\n      childRouters[routeName] = screen.router;\n    } else {\n      // If it doesn't have router it's an ordinary React component.\n      childRouters[routeName] = null;\n    }\n  });\n\n  var { initialRouteParams } = stackConfig;\n  var getCustomActionCreators = stackConfig.getCustomActionCreators || defaultActionCreators;\n\n  var initialRouteName = stackConfig.initialRouteName || routeNames[0];\n\n  var initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    var route = {};\n    var childRouter = childRouters[action.routeName];\n\n    // This is a push-like action, and childRouter will be a router or null if we are responsible for this routeName\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      var childState = {};\n      // The router is null for normal leaf routes\n      if (childRouter !== null) {\n        var childAction = action.action || _NavigationActions2.default.init({ params: action.params });\n        childState = childRouter.getStateForAction(childAction);\n      }\n\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [_extends({\n          params: action.params\n        }, childState, {\n          key: action.key || (0, _KeyGenerator.generateKey)(),\n          routeName: action.routeName\n        })]\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(_NavigationActions2.default.navigate({\n        routeName: initialRouteName,\n        params: initialRouteParams\n      }));\n    }\n    var params = (routeConfigs[initialRouteName].params || route.params || action.params || initialRouteParams) && _extends({}, routeConfigs[initialRouteName].params || {}, route.params || {}, action.params || {}, initialRouteParams || {});\n    var { initialRouteKey } = stackConfig;\n    route = _extends({}, route, params ? { params } : {}, {\n      routeName: initialRouteName,\n      key: action.key || initialRouteKey || (0, _KeyGenerator.generateKey)()\n    });\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route]\n    };\n  }\n\n  function getParamsForRouteAndAction(routeName, action) {\n    var routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return _extends({}, routeConfig.params, action.params);\n    } else {\n      return action.params;\n    }\n  }\n\n  var {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams\n  } = (0, _pathUtils.createPathParser)(childRouters, routeConfigs, stackConfig);\n\n  return {\n    childRouters,\n\n    getComponentForState(state) {\n      var activeChildRoute = state.routes[state.index];\n      var { routeName } = activeChildRoute;\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);\n    },\n\n    getActionCreators(route, navStateKey) {\n      return _extends({}, getCustomActionCreators(route, navStateKey), {\n        pop: (n, params) => _StackActions2.default.pop(_extends({\n          n\n        }, params)),\n        popToTop: params => _StackActions2.default.popToTop(params),\n        push: (routeName, params, action) => _StackActions2.default.push({\n          routeName,\n          params,\n          action\n        }),\n        replace: (replaceWith, params, action, newKey) => {\n          if (typeof replaceWith === 'string') {\n            return _StackActions2.default.replace({\n              routeName: replaceWith,\n              params,\n              action,\n              key: route.key,\n              newKey\n            });\n          }\n          (0, _invariant2.default)(typeof replaceWith === 'object', 'Must replaceWith an object or a string');\n          (0, _invariant2.default)(params == null, 'Params must not be provided to .replace() when specifying an object');\n          (0, _invariant2.default)(action == null, 'Child action must not be provided to .replace() when specifying an object');\n          (0, _invariant2.default)(newKey == null, 'Child action must not be provided to .replace() when specifying an object');\n          return _StackActions2.default.replace(replaceWith);\n        },\n        reset: (actions, index) => _StackActions2.default.reset({\n          actions,\n          index: index == null ? actions.length - 1 : index,\n          key: navStateKey\n        }),\n        dismiss: () => _NavigationActions2.default.back({\n          key: navStateKey\n        })\n      });\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      var activeChildRoute = state.routes[state.index];\n\n      if (!isResetToRootStack(action) && action.type !== _NavigationActions2.default.NAVIGATE) {\n        // Let the active child router handle the action\n        var activeChildRouter = childRouters[activeChildRoute.routeName];\n        if (activeChildRouter) {\n          var route = activeChildRouter.getStateForAction(action, activeChildRoute);\n          if (route !== null && route !== activeChildRoute) {\n            return _StateUtils2.default.replaceAt(state, activeChildRoute.key, route,\n            // the following tells replaceAt to NOT change the index to this route for the setParam action, because people don't expect param-setting actions to switch the active route\n            action.type === _NavigationActions2.default.SET_PARAMS);\n          }\n        }\n      } else if (action.type === _NavigationActions2.default.NAVIGATE) {\n        // Traverse routes from the top of the stack to the bottom, so the\n        // active route has the first opportunity, then the one before it, etc.\n\n        for (var childRoute of state.routes.slice().reverse()) {\n          var childRouter = childRouters[childRoute.routeName];\n          var childAction = action.routeName === childRoute.routeName && action.action ? action.action : action;\n\n          if (childRouter) {\n            var nextRouteState = childRouter.getStateForAction(childAction, childRoute);\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              var newState = _StateUtils2.default.replaceAndPrune(state, nextRouteState ? nextRouteState.key : childRoute.key, nextRouteState ? nextRouteState : childRoute);\n              return _extends({}, newState, {\n                isTransitioning: state.index !== newState.index ? action.immediate !== true : state.isTransitioning\n              });\n            }\n          }\n        }\n      }\n\n      // Handle push and navigate actions. This must happen after the focused\n      // child router has had a chance to handle the action.\n      if (behavesLikePushAction(action) && childRouters[action.routeName] !== undefined // undefined means it's not a childRouter or a screen\n      ) {\n          var _childRouter = childRouters[action.routeName];\n          var _route = void 0;\n\n          (0, _invariant2.default)(action.type !== _StackActions2.default.PUSH || action.key == null, 'StackRouter does not support key on the push action');\n\n          // Before pushing a new route we first try to find one in the existing route stack\n          // More information on this: https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md\n          var lastRouteIndex = state.routes.findIndex(r => {\n            if (action.key) {\n              return r.key === action.key;\n            } else {\n              return r.routeName === action.routeName;\n            }\n          });\n\n          // An instance of this route exists already and we're dealing with a navigate action\n          if (action.type !== _StackActions2.default.PUSH && lastRouteIndex !== -1) {\n            // If index is unchanged and params are not being set, leave state identity intact\n            if (state.index === lastRouteIndex && !action.params) {\n              return null;\n            }\n\n            // Remove the now unused routes at the tail of the routes array\n            var routes = state.routes.slice(0, lastRouteIndex + 1);\n\n            // Apply params if provided, otherwise leave route identity intact\n            if (action.params) {\n              var _route2 = state.routes[lastRouteIndex];\n              routes[lastRouteIndex] = _extends({}, _route2, {\n                params: _extends({}, _route2.params, action.params)\n              });\n            }\n            // Return state with new index. Change isTransitioning only if index has changed\n            return _extends({}, state, {\n              isTransitioning: state.index !== lastRouteIndex ? action.immediate !== true : state.isTransitioning,\n              index: lastRouteIndex,\n              routes\n            });\n          }\n\n          if (_childRouter) {\n            // Delegate to the child router with the given action, or init it\n            var _childAction = action.action || _NavigationActions2.default.init({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            });\n            _route = _extends({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            }, _childRouter.getStateForAction(_childAction), {\n              routeName: action.routeName,\n              key: action.key || (0, _KeyGenerator.generateKey)()\n            });\n          } else {\n            // Create the route from scratch\n            _route = {\n              params: getParamsForRouteAndAction(action.routeName, action),\n              routeName: action.routeName,\n              key: action.key || (0, _KeyGenerator.generateKey)()\n            };\n          }\n          return _extends({}, _StateUtils2.default.push(state, _route), {\n            isTransitioning: action.immediate !== true\n          });\n        } else if (action.type === _StackActions2.default.PUSH && childRouters[action.routeName] === undefined) {\n        // Return the state identity to bubble the action up\n        return state;\n      }\n\n      // Handle navigation to other child routers that are not yet pushed\n      if (behavesLikePushAction(action)) {\n        var childRouterNames = Object.keys(childRouters);\n        for (var i = 0; i < childRouterNames.length; i++) {\n          var childRouterName = childRouterNames[i];\n          var _childRouter2 = childRouters[childRouterName];\n          if (_childRouter2) {\n            // For each child router, start with a blank state\n            var initChildRoute = _childRouter2.getStateForAction(_NavigationActions2.default.init());\n            // Then check to see if the router handles our navigate action\n            var navigatedChildRoute = _childRouter2.getStateForAction(action, initChildRoute);\n            var routeToPush = null;\n            if (navigatedChildRoute === null) {\n              // Push the route if the router has 'handled' the action and returned null\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              // Push the route if the state has changed in response to this navigation\n              routeToPush = navigatedChildRoute;\n            }\n            if (routeToPush) {\n              var _route3 = _extends({}, routeToPush, {\n                routeName: childRouterName,\n                key: action.key || (0, _KeyGenerator.generateKey)()\n              });\n              return _extends({}, _StateUtils2.default.push(state, _route3), {\n                isTransitioning: action.immediate !== true\n              });\n            }\n          }\n        }\n      }\n\n      // Handle pop-to-top behavior. Make sure this happens after children have had a chance to handle the action, so that the inner stack pops to top first.\n      if (action.type === _StackActions2.default.POP_TO_TOP) {\n        // Refuse to handle pop to top if a key is given that doesn't correspond\n        // to this router\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        // If we're already at the top, then we return the state with a new\n        // identity so that the action is handled by this router.\n        if (state.index > 0) {\n          return _extends({}, state, {\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]]\n          });\n        }\n        return state;\n      }\n\n      // Handle replace action\n      if (action.type === _StackActions2.default.REPLACE) {\n        var routeIndex = void 0;\n\n        // If the key param is undefined, set the index to the last route in the stack\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex(r => r.key === action.key);\n        }\n\n        // Only replace if the key matches one of our routes\n        if (routeIndex !== -1) {\n          var _childRouter3 = childRouters[action.routeName];\n          var childState = {};\n          if (_childRouter3) {\n            var _childAction2 = action.action || _NavigationActions2.default.init({\n              params: getParamsForRouteAndAction(action.routeName, action)\n            });\n            childState = _childRouter3.getStateForAction(_childAction2);\n          }\n          var _routes = [...state.routes];\n          _routes[routeIndex] = _extends({\n            params: getParamsForRouteAndAction(action.routeName, action)\n          }, childState, {\n            routeName: action.routeName,\n            key: action.newKey || (0, _KeyGenerator.generateKey)()\n          });\n          return _extends({}, state, { routes: _routes });\n        }\n      }\n\n      // Update transitioning state\n      if (action.type === _StackActions2.default.COMPLETE_TRANSITION && (action.key == null || action.key === state.key) && action.toChildKey === state.routes[state.index].key && state.isTransitioning) {\n        return _extends({}, state, {\n          isTransitioning: false\n        });\n      }\n\n      if (action.type === _NavigationActions2.default.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          var params = _extends({}, lastRoute.params, action.params);\n          var _routes2 = [...state.routes];\n          _routes2[state.routes.indexOf(lastRoute)] = _extends({}, lastRoute, {\n            params\n          });\n          return _extends({}, state, {\n            routes: _routes2\n          });\n        }\n      }\n\n      if (action.type === _StackActions2.default.RESET) {\n        // Only handle reset actions that are unspecified or match this state key\n        if (action.key != null && action.key != state.key) {\n          // Deliberately use != instead of !== so we can match null with\n          // undefined on either the state or the action\n          return state;\n        }\n        var newStackActions = action.actions;\n\n        return _extends({}, state, {\n          routes: newStackActions.map(newStackAction => {\n            var router = childRouters[newStackAction.routeName];\n\n            var childState = {};\n\n            if (router) {\n              var _childAction3 = newStackAction.action || _NavigationActions2.default.init({\n                params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n              });\n\n              childState = router.getStateForAction(_childAction3);\n            }\n\n            return _extends({\n              params: getParamsForRouteAndAction(newStackAction.routeName, newStackAction)\n            }, childState, {\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || (0, _KeyGenerator.generateKey)()\n            });\n          }),\n          index: action.index\n        });\n      }\n\n      if (action.type === _NavigationActions2.default.BACK || action.type === _StackActions2.default.POP) {\n        var { key: _key, n, immediate } = action;\n        var backRouteIndex = state.index;\n        if (action.type === _StackActions2.default.POP && n != null) {\n          // determine the index to go back *from*. In this case, n=1 means to go\n          // back from state.index, as if it were a normal \"BACK\" action\n          backRouteIndex = Math.max(1, state.index - n + 1);\n        } else if (_key) {\n          var backRoute = state.routes.find(route => route.key === _key);\n          backRouteIndex = state.routes.indexOf(backRoute);\n        }\n\n        if (backRouteIndex > 0) {\n          return _extends({}, state, {\n            routes: state.routes.slice(0, backRouteIndex),\n            index: backRouteIndex - 1,\n            isTransitioning: immediate !== true\n          });\n        }\n      }\n\n      // By this point in the router's state handling logic, we have handled the behavior of the active route, and handled any stack actions.\n      // If we haven't returned by now, we should allow non-active child routers to handle this action, and switch to that index if the child state (route) does change..\n\n      var keyIndex = action.key ? _StateUtils2.default.indexOf(state, action.key) : -1;\n\n      // Traverse routes from the top of the stack to the bottom, so the\n      // active route has the first opportunity, then the one before it, etc.\n      for (var _childRoute of state.routes.slice().reverse()) {\n        if (_childRoute.key === activeChildRoute.key) {\n          // skip over the active child because we let it attempt to handle the action earlier\n          continue;\n        }\n        // If a key is provided and in routes state then let's use that\n        // knowledge to skip extra getStateForAction calls on other child\n        // routers\n        if (keyIndex >= 0 && _childRoute.key !== action.key) {\n          continue;\n        }\n        var _childRouter4 = childRouters[_childRoute.routeName];\n        if (_childRouter4) {\n          var _route4 = _childRouter4.getStateForAction(action, _childRoute);\n\n          if (_route4 === null) {\n            return state;\n          } else if (_route4 && _route4 !== _childRoute) {\n            return _StateUtils2.default.replaceAt(state, _childRoute.key, _route4,\n            // the following tells replaceAt to NOT change the index to this route for the setParam action or complete transition action,\n            // because people don't expect these actions to switch the active route\n            action.type === _NavigationActions2.default.SET_PARAMS || action.type === _StackActions2.default.COMPLETE_TRANSITION || action.type.includes('DRAWER'));\n          }\n        }\n      }\n\n      return state;\n    },\n\n    getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, stackConfig.defaultNavigationOptions)\n  };\n};"]},"metadata":{},"sourceType":"script"}